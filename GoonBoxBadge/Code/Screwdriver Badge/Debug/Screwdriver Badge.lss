
Screwdriver Badge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001fae  00002042  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000047  008000a0  008000a0  00002082  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000020f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001255  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000677  00000000  00000000  000033e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c36  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00004694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000867  00000000  00000000  0000476c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00004fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c9       	rjmp	.-3256   	; 0xfffff34a <__eeprom_end+0xff7ef34a>
       2:	be c9       	rjmp	.-3204   	; 0xfffff380 <__eeprom_end+0xff7ef380>
       4:	bd c9       	rjmp	.-3206   	; 0xfffff380 <__eeprom_end+0xff7ef380>
       6:	bc c9       	rjmp	.-3208   	; 0xfffff380 <__eeprom_end+0xff7ef380>
       8:	bb c9       	rjmp	.-3210   	; 0xfffff380 <__eeprom_end+0xff7ef380>
       a:	ba c9       	rjmp	.-3212   	; 0xfffff380 <__eeprom_end+0xff7ef380>
       c:	bd ce       	rjmp	.-646    	; 0xfffffd88 <__eeprom_end+0xff7efd88>
       e:	b8 c9       	rjmp	.-3216   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      10:	b7 c9       	rjmp	.-3218   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      12:	b6 c9       	rjmp	.-3220   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      14:	b5 c9       	rjmp	.-3222   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      16:	b4 c9       	rjmp	.-3224   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      18:	b3 c9       	rjmp	.-3226   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      1a:	b2 c9       	rjmp	.-3228   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      1c:	b1 c9       	rjmp	.-3230   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      1e:	b0 c9       	rjmp	.-3232   	; 0xfffff380 <__eeprom_end+0xff7ef380>
      20:	af c9       	rjmp	.-3234   	; 0xfffff380 <__eeprom_end+0xff7ef380>

00000022 <__trampolines_end>:
      22:	e1 12       	cpse	r14, r17
      24:	10 12       	cpse	r1, r16
      26:	7f 10       	cpse	r7, r15
      28:	7e 0f       	add	r23, r30
      2a:	e5 0e       	add	r14, r21
      2c:	84 0e       	add	r8, r20
      2e:	73 0d       	add	r23, r3
      30:	ea 0c       	add	r14, r10
      32:	d9 0b       	sbc	r29, r25
      34:	40 0b       	sbc	r20, r16
      36:	6f 0a       	sbc	r6, r31
      38:	d6 09       	sbc	r29, r6
      3a:	05 09       	sbc	r16, r5
      3c:	44 08       	sbc	r4, r4
      3e:	ab 07       	cpc	r26, r27
      40:	12 07       	cpc	r17, r18
      42:	89 06       	cpc	r8, r25
      44:	f0 05       	cpc	r31, r0
      46:	5f 04       	cpc	r5, r15
      48:	ce 02       	muls	r28, r30
      4a:	35 02       	muls	r19, r21
      4c:	9c 01       	movw	r18, r24
      4e:	03 01       	movw	r0, r6
      50:	52 00       	.word	0x0052	; ????

00000052 <admiralCode>:
      52:	64 28 00 93 01 28 00 93 01 28 00 29 00 28 00 46     d(...(...(.).(.F
      62:	01 28 00 29 00 28 00 46 01 28 00 93 01 28 00 29     .(.).(.F.(...(.)
      72:	00 28 00 46 01 28 00 93 01 28 00 29 00 28 00 46     .(.F.(...(.).(.F
      82:	01 28 00 93 01 28 00 93 01 28 00 29 00 28 00 46     .(...(...(.).(.F
      92:	01 28 00 29 00 28 00 46 01 28 00 93 01 28 00 29     .(.).(.F.(...(.)
      a2:	00 28 00 46 01 28 00 c0 20 28 00 93 01 28 00 93     .(.F.(.. (...(..
      b2:	01 28 00 29 00 28 00 46 01 28 00 29 00 28 00 46     .(.).(.F.(.).(.F
      c2:	01 28 00 93 01 28 00 29 00 28 00 46 01 28 00 93     .(...(.).(.F.(..
      d2:	01 28 00 29 00 28 00 46 01 28 00 93 01 28 00 93     .(.).(.F.(...(..
      e2:	01 28 00 29 00 28 00 46 01 28 00 29 00 28 00 46     .(.).(.F.(.).(.F
      f2:	01 28 00 93 01 28 00 29 00 28 00 46 01 28 00 00     .(...(.).(.F.(..
	...

00000103 <NECCode>:
     103:	68 b0 02 59 01 2a 00 2e 00 2a 00 2e 00 2a 00 2e     h..Y.*...*...*..
     113:	00 2a 00 86 00 2a 00 86 00 2a 00 2e 00 2a 00 2e     .*...*...*...*..
     123:	00 2a 00 2e 00 2a 00 2e 00 2a 00 2e 00 2a 00 2e     .*...*...*...*..
     133:	00 2a 00 86 00 2a 00 86 00 2a 00 2e 00 2a 00 2e     .*...*...*...*..
     143:	00 2a 00 2e 00 2a 00 2e 00 2a 00 2e 00 2a 00 2e     .*...*...*...*..
     153:	00 2a 00 2e 00 2a 00 2e 00 2a 00 2e 00 2a 00 86     .*...*...*...*..
     163:	00 2a 00 86 00 2a 00 86 00 2a 00 86 00 2a 00 86     .*...*...*...*..
     173:	00 2a 00 86 00 2a 00 86 00 2a 00 86 00 2a 00 2e     .*...*...*...*..
     183:	00 2a 00 2e 00 2a 00 69 0d b2 02 ac 00 2a 00 69     .*...*.i.....*.i
     193:	1c b2 02 ac 00 2a 00 00 00                          .....*...

0000019c <daewooCode>:
     19c:	68 67 02 33 01 26 00 27 00 26 00 27 00 26 00 7a     hg.3.&.'.&.'.&.z
     1ac:	00 26 00 27 00 26 00 7a 00 26 00 27 00 26 00 27     .&.'.&.z.&.'.&.'
     1bc:	00 26 00 27 00 26 00 33 01 26 00 7a 00 26 00 27     .&.'.&.3.&.z.&.'
     1cc:	00 26 00 7a 00 26 00 27 00 26 00 7a 00 26 00 27     .&.z.&.'.&.z.&.'
     1dc:	00 26 00 27 00 26 00 27 00 26 00 04 07 68 02 33     .&.'.&.'.&...h.3
     1ec:	01 26 00 27 00 26 00 27 00 26 00 7a 00 26 00 27     .&.'.&.'.&.z.&.'
     1fc:	00 26 00 7a 00 26 00 27 00 26 00 27 00 26 00 27     .&.z.&.'.&.'.&.'
     20c:	00 26 00 33 01 26 00 7a 00 26 00 27 00 26 00 7a     .&.3.&.z.&.'.&.z
     21c:	00 26 00 27 00 26 00 7a 00 26 00 27 00 26 00 27     .&.'.&.z.&.'.&.'
     22c:	00 26 00 27 00 26 00 00 00                          .&.'.&...

00000235 <goldstarCode>:
     235:	68 b4 02 62 01 2f 00 29 00 2f 00 29 00 2f 00 7c     h..b./.)./.)./.|
     245:	00 2f 00 29 00 2f 00 29 00 2f 00 29 00 2f 00 29     ./.)./.)./.)./.)
     255:	00 2f 00 29 00 2f 00 7c 00 2f 00 7c 00 2f 00 29     ./.)./.|./.|./.)
     265:	00 2f 00 7c 00 2f 00 7c 00 2f 00 7c 00 2f 00 7c     ./.|./.|./.|./.|
     275:	00 2f 00 7c 00 2f 00 29 00 2f 00 29 00 2f 00 29     ./.|./.)./.)./.)
     285:	00 2f 00 7c 00 2f 00 29 00 2f 00 29 00 2f 00 29     ./.|./.)./.)./.)
     295:	00 2f 00 29 00 2f 00 7c 00 2f 00 7c 00 2f 00 7c     ./.)./.|./.|./.|
     2a5:	00 2f 00 29 00 2f 00 7c 00 2f 00 7c 00 2f 00 7c     ./.)./.|./.|./.|
     2b5:	00 2f 00 7c 00 2f 00 51 0c b6 02 af 00 2f 00 26     ./.|./.Q...../.&
     2c5:	1d b6 02 af 00 3e 00 00 00                          .....>...

000002ce <fujitsuCode>:
     2ce:	68 fb 00 7c 00 20 00 1f 00 20 00 1f 00 20 00 5e     h..|. ... ... .^
     2de:	00 20 00 1f 00 20 00 5e 00 20 00 1f 00 20 00 1f     . ... .^. ... ..
     2ee:	00 20 00 1f 00 20 00 5e 00 20 00 5e 00 20 00 1f     . ... .^. .^. ..
     2fe:	00 20 00 1f 00 20 00 1f 00 20 00 5e 00 20 00 5e     . ... ... .^. .^
     30e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     31e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     32e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 5e     . ... ... ... .^
     33e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     34e:	00 20 00 5e 00 20 00 1f 00 20 00 1f 00 20 00 5e     . .^. ... ... .^
     35e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     36e:	00 20 00 5e 00 20 00 1f 00 20 00 5e 00 20 00 1f     . .^. ... .^. ..
     37e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     38e:	00 20 00 1f 00 20 00 d3 0d fc 00 7c 00 20 00 1f     . ... .....|. ..
     39e:	00 20 00 1f 00 20 00 5e 00 20 00 1f 00 20 00 5e     . ... .^. ... .^
     3ae:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 5e     . ... ... ... .^
     3be:	00 20 00 5e 00 20 00 1f 00 20 00 1f 00 20 00 1f     . .^. ... ... ..
     3ce:	00 20 00 5e 00 20 00 5e 00 20 00 1f 00 20 00 1f     . .^. .^. ... ..
     3de:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     3ee:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 1f     . ... ... ... ..
     3fe:	00 20 00 1f 00 20 00 5e 00 20 00 1f 00 20 00 1f     . ... .^. ... ..
     40e:	00 20 00 1f 00 20 00 1f 00 20 00 5e 00 20 00 1f     . ... ... .^. ..
     41e:	00 20 00 1f 00 20 00 5e 00 20 00 1f 00 20 00 1f     . ... .^. ... ..
     42e:	00 20 00 1f 00 20 00 1f 00 20 00 5e 00 20 00 1f     . ... ... .^. ..
     43e:	00 20 00 5e 00 20 00 1f 00 20 00 1f 00 20 00 1f     . .^. ... ... ..
     44e:	00 20 00 1f 00 20 00 1f 00 20 00 1f 00 20 00 00     . ... ... ... ..
	...

0000045f <pioneer2Code>:
     45f:	68 8e 02 49 01 28 00 29 00 28 00 7b 00 28 00 29     h..I.(.).(.{.(.)
     46f:	00 28 00 7b 00 28 00 29 00 28 00 7b 00 28 00 29     .(.{.(.).(.{.(.)
     47f:	00 28 00 7b 00 28 00 7b 00 28 00 29 00 28 00 7b     .(.{.(.{.(.).(.{
     48f:	00 28 00 29 00 28 00 7b 00 28 00 29 00 28 00 7b     .(.).(.{.(.).(.{
     49f:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 7b     .(.).(.).(.).(.{
     4af:	00 28 00 7b 00 28 00 7b 00 28 00 29 00 28 00 29     .(.{.(.{.(.).(.)
     4bf:	00 28 00 29 00 28 00 7b 00 28 00 7b 00 28 00 29     .(.).(.{.(.{.(.)
     4cf:	00 28 00 29 00 28 00 29 00 28 00 7b 00 28 00 7b     .(.).(.).(.{.(.{
     4df:	00 28 00 7b 00 28 00 b5 07 8e 02 4a 01 28 00 29     .(.{.(.....J.(.)
     4ef:	00 28 00 7b 00 28 00 29 00 28 00 7b 00 28 00 29     .(.{.(.).(.{.(.)
     4ff:	00 28 00 7b 00 28 00 29 00 28 00 7b 00 28 00 7b     .(.{.(.).(.{.(.{
     50f:	00 28 00 29 00 28 00 7b 00 28 00 29 00 28 00 7b     .(.).(.{.(.).(.{
     51f:	00 28 00 29 00 28 00 7b 00 28 00 29 00 28 00 29     .(.).(.{.(.).(.)
     52f:	00 28 00 29 00 28 00 7b 00 28 00 7b 00 28 00 7b     .(.).(.{.(.{.(.{
     53f:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 7b     .(.).(.).(.).(.{
     54f:	00 28 00 7b 00 28 00 29 00 28 00 29 00 28 00 29     .(.{.(.).(.).(.)
     55f:	00 28 00 7b 00 28 00 7b 00 28 00 7b 00 28 00 b5     .(.{.(.{.(.{.(..
     56f:	07 8e 02 4a 01 28 00 29 00 28 00 7b 00 28 00 29     ...J.(.).(.{.(.)
     57f:	00 28 00 7b 00 28 00 29 00 28 00 7b 00 28 00 29     .(.{.(.).(.{.(.)
     58f:	00 28 00 7b 00 28 00 7b 00 28 00 29 00 28 00 7b     .(.{.(.{.(.).(.{
     59f:	00 28 00 29 00 28 00 7b 00 28 00 29 00 28 00 7b     .(.).(.{.(.).(.{
     5af:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 7b     .(.).(.).(.).(.{
     5bf:	00 28 00 7b 00 28 00 7b 00 28 00 29 00 28 00 29     .(.{.(.{.(.).(.)
     5cf:	00 28 00 29 00 28 00 7b 00 28 00 7b 00 28 00 29     .(.).(.{.(.{.(.)
     5df:	00 28 00 29 00 28 00 29 00 28 00 7b 00 28 00 00     .(.).(.).(.{.(..
	...

000005f0 <bellCode>:
     5f0:	64 d0 02 66 01 2e 00 2c 00 2e 00 2c 00 2e 00 2c     d..f...,...,...,
     600:	00 2e 00 8b 00 2e 00 8b 00 2e 00 8b 00 2e 00 2c     ...............,
     610:	00 2e 00 2c 00 2e 00 8b 00 2e 00 8b 00 2e 00 8b     ...,............
     620:	00 2e 00 2c 00 2e 00 2c 00 2e 00 2c 00 2e 00 8b     ...,...,...,....
     630:	00 2e 00 8b 00 2e 00 2c 00 2e 00 8b 00 2e 00 2c     .......,.......,
     640:	00 2e 00 2c 00 2e 00 8b 00 2e 00 2c 00 2e 00 2c     ...,.......,...,
     650:	00 2e 00 2c 00 2e 00 8b 00 2e 00 2c 00 2e 00 8b     ...,.......,....
     660:	00 2e 00 8b 00 2e 00 2c 00 2e 00 8b 00 2e 00 8b     .......,........
     670:	00 2e 00 8b 00 2e 00 f8 0c d0 02 b4 00 2e 00 b1     ................
     680:	1d d0 02 b4 00 2e 00 00 00                          .........

00000689 <aocCode>:
     689:	74 14 00 90 00 14 00 91 00 14 00 91 00 14 00 3d     t..............=
     699:	00 14 00 3d 00 14 00 3d 00 14 00 91 00 14 00 3d     ...=...=.......=
     6a9:	00 14 00 3d 00 14 00 91 00 14 00 3d 00 14 00 3d     ...=.......=...=
     6b9:	00 14 00 3d 00 14 00 3d 00 14 00 3d 00 14 00 3d     ...=...=...=...=
     6c9:	00 14 00 c1 06 14 00 91 00 14 00 91 00 14 00 91     ................
     6d9:	00 14 00 3d 00 14 00 3d 00 14 00 3d 00 14 00 91     ...=...=...=....
     6e9:	00 14 00 3d 00 14 00 3d 00 14 00 91 00 14 00 3d     ...=...=.......=
     6f9:	00 14 00 3d 00 14 00 3d 00 14 00 3d 00 14 00 3d     ...=...=...=...=
     709:	00 14 00 3d 00 14 00 00 00                          ...=.....

00000712 <bushCode>:
     712:	68 b4 02 5c 01 2b 00 2b 00 2b 00 82 00 2b 00 2b     h..\.+.+.+...+.+
     722:	00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 82     .+.+.+.+.+.+.+..
     732:	00 2b 00 2b 00 2b 00 82 00 2b 00 2b 00 2b 00 82     .+.+.+...+.+.+..
     742:	00 2b 00 82 00 2b 00 82 00 2b 00 82 00 2b 00 2b     .+...+...+...+.+
     752:	00 2b 00 82 00 2b 00 82 00 2b 00 2b 00 2b 00 2b     .+...+...+.+.+.+
     762:	00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b     .+.+.+.+.+.+.+.+
     772:	00 2b 00 2b 00 2b 00 2b 00 2b 00 82 00 2b 00 82     .+.+.+.+.+...+..
     782:	00 2b 00 82 00 2b 00 82 00 2b 00 82 00 2b 00 82     .+...+...+...+..
     792:	00 2b 00 82 00 2b 00 de 0b b6 02 ac 00 2b 00 ec     .+...+.......+..
     7a2:	1c b6 02 ac 00 2b 00 00 00                          .....+...

000007ab <viewsonicCode>:
     7ab:	68 b4 02 5c 01 2b 00 2b 00 2b 00 2b 00 2b 00 2b     h..\.+.+.+.+.+.+
     7bb:	00 2b 00 2b 00 2b 00 2b 00 2b 00 82 00 2b 00 82     .+.+.+.+.+...+..
     7cb:	00 2b 00 2b 00 2b 00 82 00 2b 00 82 00 2b 00 82     .+.+.+...+...+..
     7db:	00 2b 00 82 00 2b 00 82 00 2b 00 2b 00 2b 00 2b     .+...+...+.+.+.+
     7eb:	00 2b 00 82 00 2b 00 82 00 2b 00 82 00 2b 00 2b     .+...+...+...+.+
     7fb:	00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b     .+.+.+.+.+.+.+.+
     80b:	00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 82     .+.+.+.+.+.+.+..
     81b:	00 2b 00 82 00 2b 00 82 00 2b 00 82 00 2b 00 82     .+...+...+...+..
     82b:	00 2b 00 82 00 2b 00 de 0b b6 02 ac 00 2b 00 ec     .+...+.......+..
     83b:	1c b6 02 ac 00 2b 00 00 00                          .....+...

00000844 <hisenseCode>:
     844:	68 b0 02 58 01 2a 00 29 00 2a 00 29 00 2a 00 7f     h..X.*.).*.).*..
     854:	00 2a 00 7f 00 2a 00 7f 00 2a 00 29 00 2a 00 29     .*...*...*.).*.)
     864:	00 2a 00 29 00 2a 00 7f 00 2a 00 29 00 2a 00 29     .*.).*...*.).*.)
     874:	00 2a 00 29 00 2a 00 29 00 2a 00 7f 00 2a 00 7f     .*.).*.).*...*..
     884:	00 2a 00 29 00 2a 00 29 00 2a 00 29 00 2a 00 7f     .*.).*.).*.).*..
     894:	00 2a 00 7f 00 2a 00 7f 00 2a 00 29 00 2a 00 7f     .*...*...*.).*..
     8a4:	00 2a 00 7f 00 2a 00 7f 00 2a 00 7f 00 2a 00 29     .*...*...*...*.)
     8b4:	00 2a 00 7f 00 2a 00 29 00 2a 00 29 00 2a 00 7f     .*...*.).*.).*..
     8c4:	00 2a 00 29 00 2a 00 29 00 2a 00 29 00 2a 00 7f     .*.).*.).*.).*..
     8d4:	00 2a 00 29 00 2a 00 7f 00 2a 00 7f 00 2a 00 29     .*.).*...*...*.)
     8e4:	00 2a 00 7f 00 2a 00 7f 00 2a 00 7f 00 2a 00 ec     .*...*...*...*..
     8f4:	06 b1 02 57 01 2a 00 29 1c b1 02 57 01 2a 00 00     ...W.*.)...W.*..
	...

00000905 <sampoCode>:
     905:	68 00 01 01 01 40 00 c3 00 40 00 41 00 40 00 c3     h....@...@.A.@..
     915:	00 40 00 c3 00 40 00 41 00 40 00 c3 00 40 00 41     .@...@.A.@...@.A
     925:	00 40 00 c3 00 40 00 c3 00 40 00 41 00 40 00 41     .@...@...@.A.@.A
     935:	00 40 00 41 00 40 00 41 00 40 00 c3 00 40 00 41     .@.A.@.A.@...@.A
     945:	00 40 00 c3 00 40 00 41 00 40 00 41 00 40 00 c3     .@...@.A.@.A.@..
     955:	00 40 00 41 00 40 00 41 00 40 00 c3 00 40 00 c3     .@.A.@.A.@...@..
     965:	00 40 00 c3 00 40 00 da 09 00 01 02 01 40 00 c3     .@...@.......@..
     975:	00 40 00 41 00 40 00 c3 00 40 00 c3 00 40 00 41     .@.A.@...@...@.A
     985:	00 40 00 c3 00 40 00 41 00 40 00 c3 00 40 00 c3     .@...@.A.@...@..
     995:	00 40 00 41 00 40 00 41 00 40 00 41 00 40 00 41     .@.A.@.A.@.A.@.A
     9a5:	00 40 00 c3 00 40 00 41 00 40 00 c3 00 40 00 41     .@...@.A.@...@.A
     9b5:	00 40 00 41 00 40 00 c3 00 40 00 41 00 40 00 41     .@.A.@...@.A.@.A
     9c5:	00 40 00 c3 00 40 00 c3 00 40 00 c3 00 40 00 00     .@...@...@...@..
	...

000009d6 <hitachiCode>:
     9d6:	68 a9 02 53 01 2b 00 29 00 2b 00 29 00 2b 00 29     h..S.+.).+.).+.)
     9e6:	00 2b 00 29 00 2b 00 83 00 2b 00 29 00 2b 00 83     .+.).+...+.).+..
     9f6:	00 2b 00 29 00 2b 00 83 00 2b 00 83 00 2b 00 83     .+.).+...+...+..
     a06:	00 2b 00 83 00 2b 00 29 00 2b 00 83 00 2b 00 29     .+...+.).+...+.)
     a16:	00 2b 00 83 00 2b 00 83 00 2b 00 83 00 2b 00 83     .+...+...+...+..
     a26:	00 2b 00 29 00 2b 00 83 00 2b 00 29 00 2b 00 29     .+.).+...+.).+.)
     a36:	00 2b 00 29 00 2b 00 29 00 2b 00 29 00 2b 00 29     .+.).+.).+.).+.)
     a46:	00 2b 00 83 00 2b 00 29 00 2b 00 83 00 2b 00 83     .+...+.).+...+..
     a56:	00 2b 00 83 00 2b 00 23 0c aa 02 ac 00 2b 00 18     .+...+.#.....+..
     a66:	1c aa 02 ac 00 2a 00 00 00                          .....*...

00000a6f <jvcCode>:
     a6f:	68 88 02 41 01 28 00 79 00 28 00 79 00 28 00 29     h..A.(.y.(.y.(.)
     a7f:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 29     .(.).(.).(.).(.)
     a8f:	00 28 00 29 00 28 00 79 00 28 00 79 00 28 00 79     .(.).(.y.(.y.(.y
     a9f:	00 28 00 29 00 28 00 79 00 28 00 29 00 28 00 29     .(.).(.y.(.).(.)
     aaf:	00 28 00 29 00 28 00 df 06 28 00 79 00 28 00 79     .(.).(...(.y.(.y
     abf:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 29     .(.).(.).(.).(.)
     acf:	00 28 00 29 00 28 00 29 00 28 00 79 00 28 00 79     .(.).(.).(.y.(.y
     adf:	00 28 00 79 00 28 00 29 00 28 00 79 00 28 00 29     .(.y.(.).(.y.(.)
     aef:	00 28 00 29 00 28 00 29 00 28 00 df 06 28 00 79     .(.).(.).(...(.y
     aff:	00 28 00 79 00 28 00 29 00 28 00 29 00 28 00 29     .(.y.(.).(.).(.)
     b0f:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 79     .(.).(.).(.).(.y
     b1f:	00 28 00 79 00 28 00 79 00 28 00 29 00 28 00 79     .(.y.(.y.(.).(.y
     b2f:	00 28 00 29 00 28 00 29 00 28 00 29 00 28 00 00     .(.).(.).(.).(..
	...

00000b40 <sylvaniaCode>:
     b40:	68 b4 02 5a 01 2a 00 82 00 2a 00 82 00 2a 00 82     h..Z.*...*...*..
     b50:	00 2a 00 2a 00 2a 00 2a 00 2a 00 2a 00 2a 00 2a     .*.*.*.*.*.*.*.*
     b60:	00 2a 00 82 00 2a 00 2a 00 2a 00 82 00 2a 00 2a     .*...*.*.*...*.*
     b70:	00 2a 00 2a 00 2a 00 2a 00 2a 00 82 00 2a 00 2a     .*.*.*.*.*...*.*
     b80:	00 2a 00 2a 00 2a 00 2a 00 2a 00 2a 00 2a 00 2a     .*.*.*.*.*.*.*.*
     b90:	00 2a 00 2a 00 2a 00 2a 00 2a 00 82 00 2a 00 82     .*.*.*.*.*...*..
     ba0:	00 2a 00 82 00 2a 00 82 00 2a 00 82 00 2a 00 82     .*...*...*...*..
     bb0:	00 2a 00 82 00 2a 00 82 00 2a 00 2a 00 2a 00 2a     .*...*...*.*.*.*
     bc0:	00 2a 00 2a 00 2a 00 de 0b b6 02 ac 00 2a 00 d9     .*.*.*.......*..
     bd0:	1c b6 02 ac 00 2a 00 00 00                          .....*...

00000bd9 <pioneerCode>:
     bd9:	68 b4 02 5a 01 2c 00 82 00 2c 00 2c 00 2c 00 2c     h..Z.,...,.,.,.,
     be9:	00 2c 00 2c 00 2c 00 82 00 2c 00 82 00 2c 00 82     .,.,.,...,...,..
     bf9:	00 2c 00 2c 00 2c 00 2c 00 2c 00 82 00 2c 00 82     .,.,.,.,.,...,..
     c09:	00 2c 00 82 00 2c 00 2c 00 2c 00 2c 00 2c 00 2c     .,...,.,.,.,.,.,
     c19:	00 2c 00 82 00 2c 00 2c 00 2c 00 82 00 2c 00 2c     .,...,.,.,...,.,
     c29:	00 2c 00 82 00 2c 00 2c 00 2c 00 2c 00 2c 00 82     .,...,.,.,.,.,..
     c39:	00 2c 00 2c 00 2c 00 82 00 2c 00 2c 00 2c 00 82     .,.,.,...,.,.,..
     c49:	00 2c 00 2c 00 2c 00 82 00 2c 00 82 00 2c 00 2c     .,.,.,...,...,.,
     c59:	00 2c 00 82 00 2c 00 0d 0c b6 02 58 01 2c 00 82     .,...,.....X.,..
     c69:	00 2c 00 2c 00 2c 00 2c 00 2c 00 2c 00 2c 00 82     .,.,.,.,.,.,.,..
     c79:	00 2c 00 82 00 2c 00 82 00 2c 00 2c 00 2c 00 2c     .,...,...,.,.,.,
     c89:	00 2c 00 82 00 2c 00 82 00 2c 00 82 00 2c 00 2c     .,...,...,...,.,
     c99:	00 2c 00 2c 00 2c 00 2c 00 2c 00 82 00 2c 00 2c     .,.,.,.,.,...,.,
     ca9:	00 2c 00 82 00 2c 00 2c 00 2c 00 82 00 2c 00 2c     .,...,.,.,...,.,
     cb9:	00 2c 00 2c 00 2c 00 82 00 2c 00 2c 00 2c 00 82     .,.,.,...,.,.,..
     cc9:	00 2c 00 2c 00 2c 00 82 00 2c 00 2c 00 2c 00 82     .,.,.,...,.,.,..
     cd9:	00 2c 00 82 00 2c 00 2c 00 2c 00 82 00 2c 00 00     .,...,.,.,...,..
	...

00000cea <zenithCode>:
     cea:	66 28 00 25 00 28 00 40 01 28 00 8f 01 28 00 25     f(.%.(.@.(...(.%
     cfa:	00 28 00 40 01 28 00 25 00 28 00 40 01 28 00 8f     .(.@.(.%.(.@.(..
     d0a:	01 28 00 25 00 28 00 40 01 28 00 8f 01 28 00 25     .(.%.(.@.(...(.%
     d1a:	00 28 00 40 01 28 00 8f 01 28 00 8f 01 28 00 25     .(.@.(...(...(.%
     d2a:	00 28 00 1b 25 28 00 25 00 28 00 40 01 28 00 8f     .(..%(.%.(.@.(..
     d3a:	01 28 00 25 00 28 00 40 01 28 00 25 00 28 00 40     .(.%.(.@.(.%.(.@
     d4a:	01 28 00 8f 01 28 00 25 00 28 00 40 01 28 00 8f     .(...(.%.(.@.(..
     d5a:	01 28 00 25 00 28 00 40 01 28 00 8f 01 28 00 8f     .(.%.(.@.(...(..
     d6a:	01 28 00 25 00 28 00 00 00                          .(.%.(...

00000d73 <samsungCode>:
     d73:	68 5d 01 67 01 28 00 84 00 28 00 84 00 28 00 84     h].g.(...(...(..
     d83:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 2f     .(./.(./.(./.(./
     d93:	00 28 00 2f 00 28 00 84 00 28 00 84 00 28 00 84     .(./.(...(...(..
     da3:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 2f     .(./.(./.(./.(./
     db3:	00 28 00 2f 00 28 00 2f 00 28 00 84 00 28 00 2f     .(./.(./.(...(./
     dc3:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 2f     .(./.(./.(./.(./
     dd3:	00 28 00 2f 00 28 00 84 00 28 00 2f 00 28 00 84     .(./.(...(./.(..
     de3:	00 28 00 84 00 28 00 84 00 28 00 84 00 28 00 84     .(...(...(...(..
     df3:	00 28 00 84 00 28 00 bd 0d 5d 01 67 01 28 00 84     .(...(...].g.(..
     e03:	00 28 00 84 00 28 00 84 00 28 00 2f 00 28 00 2f     .(...(...(./.(./
     e13:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 84     .(./.(./.(./.(..
     e23:	00 28 00 84 00 28 00 84 00 28 00 2f 00 28 00 2f     .(...(...(./.(./
     e33:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 2f     .(./.(./.(./.(./
     e43:	00 28 00 84 00 28 00 2f 00 28 00 2f 00 28 00 2f     .(...(./.(./.(./
     e53:	00 28 00 2f 00 28 00 2f 00 28 00 2f 00 28 00 84     .(./.(./.(./.(..
     e63:	00 28 00 2f 00 28 00 84 00 28 00 84 00 28 00 84     .(./.(...(...(..
     e73:	00 28 00 84 00 28 00 84 00 28 00 84 00 28 00 00     .(...(...(...(..
	...

00000e84 <philipsCode>:
     e84:	70 40 00 40 00 80 00 40 00 40 00 40 00 40 00 40     p@.@...@.@.@.@.@
     e94:	00 40 00 40 00 40 00 40 00 40 00 40 00 40 00 40     .@.@.@.@.@.@.@.@
     ea4:	00 40 00 b8 00 40 00 40 00 80 00 40 00 40 00 0e     .@...@.@...@.@..
     eb4:	19 40 00 40 00 80 00 40 00 40 00 40 00 40 00 40     .@.@...@.@.@.@.@
     ec4:	00 40 00 40 00 40 00 40 00 40 00 40 00 40 00 40     .@.@.@.@.@.@.@.@
     ed4:	00 40 00 80 00 40 00 40 00 80 00 40 00 40 00 00     .@...@.@...@.@..
	...

00000ee5 <toshibaCode>:
     ee5:	68 b4 02 5c 01 2b 00 2b 00 2b 00 2b 00 2b 00 2b     h..\.+.+.+.+.+.+
     ef5:	00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 2b 00 82     .+.+.+.+.+.+.+..
     f05:	00 2b 00 2b 00 2b 00 82 00 2b 00 82 00 2b 00 82     .+.+.+...+...+..
     f15:	00 2b 00 82 00 2b 00 82 00 2b 00 82 00 2b 00 2b     .+...+...+...+.+
     f25:	00 2b 00 82 00 2b 00 2b 00 2b 00 82 00 2b 00 2b     .+...+.+.+...+.+
     f35:	00 2b 00 2b 00 2b 00 82 00 2b 00 2b 00 2b 00 2b     .+.+.+...+.+.+.+
     f45:	00 2b 00 2b 00 2b 00 82 00 2b 00 2b 00 2b 00 82     .+.+.+...+.+.+..
     f55:	00 2b 00 82 00 2b 00 2b 00 2b 00 82 00 2b 00 82     .+...+.+.+...+..
     f65:	00 2b 00 82 00 2b 00 de 0b b6 02 ac 00 2b 00 ec     .+...+.......+..
     f75:	1c b6 02 ac 00 2b 00 00 00                          .....+...

00000f7e <sharpCode>:
     f7e:	68 15 00 8e 00 16 00 3d 00 16 00 3d 00 16 00 3d     h......=...=...=
     f8e:	00 16 00 3d 00 16 00 3d 00 16 00 8e 00 16 00 8e     ...=...=........
     f9e:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 3d     ...=.......=...=
     fae:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 ac     ...=.......=....
     fbe:	0d 16 00 8e 00 16 00 3d 00 16 00 3d 00 16 00 3d     .......=...=...=
     fce:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 3d     ...=.......=...=
     fde:	00 16 00 8e 00 16 00 3d 00 16 00 8e 00 16 00 8e     .......=........
     fee:	00 16 00 8e 00 16 00 3d 00 16 00 8e 00 16 00 ac     .......=........
     ffe:	0d 16 00 8e 00 16 00 3d 00 16 00 3d 00 16 00 3d     .......=...=...=
    100e:	00 16 00 3d 00 16 00 3d 00 16 00 8e 00 16 00 8e     ...=...=........
    101e:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 3d     ...=.......=...=
    102e:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 ac     ...=.......=....
    103e:	0d 16 00 8e 00 16 00 3d 00 16 00 3d 00 16 00 3d     .......=...=...=
    104e:	00 16 00 3d 00 16 00 8e 00 16 00 3d 00 16 00 3d     ...=.......=...=
    105e:	00 16 00 8e 00 16 00 3d 00 16 00 8e 00 16 00 8e     .......=........
    106e:	00 16 00 8e 00 16 00 3d 00 16 00 8e 00 16 00 00     .......=........
	...

0000107f <panasonicCode>:
    107f:	6c 03 01 81 00 20 00 21 00 20 00 62 00 20 00 21     l.... .!. .b. .!
    108f:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    109f:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    10af:	00 20 00 21 00 20 00 21 00 20 00 62 00 20 00 21     . .!. .!. .b. .!
    10bf:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    10cf:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    10df:	00 20 00 62 00 20 00 21 00 20 00 21 00 20 00 21     . .b. .!. .!. .!
    10ef:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    10ff:	00 20 00 21 00 20 00 62 00 20 00 21 00 20 00 62     . .!. .b. .!. .b
    110f:	00 20 00 62 00 20 00 62 00 20 00 62 00 20 00 21     . .b. .b. .b. .!
    111f:	00 20 00 21 00 20 00 62 00 20 00 21 00 20 00 62     . .!. .b. .!. .b
    112f:	00 20 00 62 00 20 00 62 00 20 00 62 00 20 00 21     . .b. .b. .b. .!
    113f:	00 20 00 62 00 20 00 ca 15 03 01 82 00 20 00 21     . .b. ....... .!
    114f:	00 20 00 62 00 20 00 21 00 20 00 21 00 20 00 21     . .b. .!. .!. .!
    115f:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    116f:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    117f:	00 20 00 62 00 20 00 21 00 20 00 21 00 20 00 21     . .b. .!. .!. .!
    118f:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    119f:	00 20 00 21 00 20 00 21 00 20 00 62 00 20 00 21     . .!. .!. .b. .!
    11af:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 21     . .!. .!. .!. .!
    11bf:	00 20 00 21 00 20 00 21 00 20 00 21 00 20 00 62     . .!. .!. .!. .b
    11cf:	00 20 00 21 00 20 00 62 00 20 00 62 00 20 00 62     . .!. .b. .b. .b
    11df:	00 20 00 62 00 20 00 21 00 20 00 21 00 20 00 62     . .b. .!. .!. .b
    11ef:	00 20 00 21 00 20 00 62 00 20 00 62 00 20 00 62     . .!. .b. .b. .b
    11ff:	00 20 00 62 00 20 00 21 00 20 00 62 00 20 00 00     . .b. .!. .b. ..
	...

00001210 <rcaCode>:
    1210:	46 c9 01 c8 01 3a 00 e4 00 3a 00 e4 00 3a 00 e4     F....:...:...:..
    1220:	00 3a 00 e4 00 3a 00 71 00 3a 00 71 00 3a 00 e4     .:...:.q.:.q.:..
    1230:	00 3a 00 71 00 3a 00 e4 00 3a 00 71 00 3a 00 e4     .:.q.:...:.q.:..
    1240:	00 3a 00 71 00 3a 00 71 00 3a 00 71 00 3a 00 71     .:.q.:.q.:.q.:.q
    1250:	00 3a 00 71 00 3a 00 e4 00 3a 00 e4 00 3a 00 71     .:.q.:...:...:.q
    1260:	00 3a 00 e4 00 3a 00 71 00 3a 00 e4 00 3a 00 71     .:...:.q.:...:.q
    1270:	00 3a 00 e4 00 3a 00 91 03 c9 01 c8 01 3a 00 e4     .:...:.......:..
    1280:	00 3a 00 e4 00 3a 00 e4 00 3a 00 e4 00 3a 00 71     .:...:...:...:.q
    1290:	00 3a 00 71 00 3a 00 e4 00 3a 00 71 00 3a 00 e4     .:.q.:...:.q.:..
    12a0:	00 3a 00 71 00 3a 00 e4 00 3a 00 71 00 3a 00 71     .:.q.:...:.q.:.q
    12b0:	00 3a 00 71 00 3a 00 71 00 3a 00 71 00 3a 00 e4     .:.q.:.q.:.q.:..
    12c0:	00 3a 00 e4 00 3a 00 71 00 3a 00 e4 00 3a 00 71     .:...:.q.:...:.q
    12d0:	00 3a 00 e4 00 3a 00 71 00 3a 00 e4 00 3a 00 00     .:...:.q.:...:..
	...

000012e1 <sonyCode>:
    12e1:	68 b8 00 2d 00 5c 00 2d 00 2e 00 2d 00 5c 00 2d     h..-.\.-...-.\.-
    12f1:	00 2e 00 2d 00 5c 00 2d 00 2e 00 2d 00 2e 00 2d     ...-.\.-...-...-
    1301:	00 5c 00 2d 00 2e 00 2d 00 2e 00 2d 00 2e 00 2d     .\.-...-...-...-
    1311:	00 2e 00 14 08 b8 00 2d 00 5c 00 2d 00 2e 00 2d     .......-.\.-...-
    1321:	00 5c 00 2d 00 2e 00 2d 00 5c 00 2d 00 2e 00 2d     .\.-...-.\.-...-
    1331:	00 2e 00 2d 00 5c 00 2d 00 2e 00 2d 00 2e 00 2d     ...-.\.-...-...-
    1341:	00 2e 00 2d 00 2e 00 00 00                          ...-.....

0000134a <__ctors_end>:
    134a:	11 24       	eor	r1, r1
    134c:	1f be       	out	0x3f, r1	; 63
    134e:	cf e5       	ldi	r28, 0x5F	; 95
    1350:	d2 e0       	ldi	r29, 0x02	; 2
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	cd bf       	out	0x3d, r28	; 61

00001356 <__do_copy_data>:
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	a0 e6       	ldi	r26, 0x60	; 96
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ee ea       	ldi	r30, 0xAE	; 174
    135e:	ff e1       	ldi	r31, 0x1F	; 31
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__do_copy_data+0x10>
    1362:	05 90       	lpm	r0, Z+
    1364:	0d 92       	st	X+, r0
    1366:	a0 3a       	cpi	r26, 0xA0	; 160
    1368:	b1 07       	cpc	r27, r17
    136a:	d9 f7       	brne	.-10     	; 0x1362 <__do_copy_data+0xc>

0000136c <__do_clear_bss>:
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	a0 ea       	ldi	r26, 0xA0	; 160
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <.do_clear_bss_start>

00001374 <.do_clear_bss_loop>:
    1374:	1d 92       	st	X+, r1

00001376 <.do_clear_bss_start>:
    1376:	a7 3e       	cpi	r26, 0xE7	; 231
    1378:	b2 07       	cpc	r27, r18
    137a:	e1 f7       	brne	.-8      	; 0x1374 <.do_clear_bss_loop>
    137c:	db d1       	rcall	.+950    	; 0x1734 <main>
    137e:	15 c6       	rjmp	.+3114   	; 0x1faa <_exit>

00001380 <__bad_interrupt>:
    1380:	3f c6       	rjmp	.+3198   	; 0x2000 <__TEXT_REGION_LENGTH__>

00001382 <TouchRead>:
		LED1PORT |= 1<<LED3PIN;
		break;
	}
}

int TouchRead(int Pin, int samples){
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
	long totalValue = 0;
	for(int x=0; x<samples; x++){ 
    138e:	16 16       	cp	r1, r22
    1390:	17 06       	cpc	r1, r23
    1392:	5c f5       	brge	.+86     	; 0x13ea <TouchRead+0x68>
		//DDRA &= 0<<Pin; //set as input
		PORTA |= 1<<Pin; //turn on pullup
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	08 2e       	mov	r0, r24
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <TouchRead+0x1e>
    139c:	44 0f       	add	r20, r20
    139e:	55 1f       	adc	r21, r21
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <TouchRead+0x1a>
    13a4:	f4 2e       	mov	r15, r20
		ADMUX =   0b00100000; // connect the ADC input and the internal sample and hold capacitor to ground to discharge it
		ADCSRA |= (1 << ADSC); // start the conversion
		while((ADCSRA & (1 << ADSC)));
		PORTA &= ~(1<<Pin); //turn off pullup
    13a6:	a4 2f       	mov	r26, r20
    13a8:	a0 95       	com	r26
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	10 e0       	ldi	r17, 0x00	; 0
    13b2:	98 01       	movw	r18, r16
int TouchRead(int Pin, int samples){
	long totalValue = 0;
	for(int x=0; x<samples; x++){ 
		//DDRA &= 0<<Pin; //set as input
		PORTA |= 1<<Pin; //turn on pullup
		ADMUX =   0b00100000; // connect the ADC input and the internal sample and hold capacitor to ground to discharge it
    13b4:	b0 e2       	ldi	r27, 0x20	; 32

int TouchRead(int Pin, int samples){
	long totalValue = 0;
	for(int x=0; x<samples; x++){ 
		//DDRA &= 0<<Pin; //set as input
		PORTA |= 1<<Pin; //turn on pullup
    13b6:	9b b3       	in	r25, 0x1b	; 27
    13b8:	9f 29       	or	r25, r15
    13ba:	9b bb       	out	0x1b, r25	; 27
		ADMUX =   0b00100000; // connect the ADC input and the internal sample and hold capacitor to ground to discharge it
    13bc:	b7 b9       	out	0x07, r27	; 7
		ADCSRA |= (1 << ADSC); // start the conversion
    13be:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1 << ADSC)));
    13c0:	36 99       	sbic	0x06, 6	; 6
    13c2:	fe cf       	rjmp	.-4      	; 0x13c0 <TouchRead+0x3e>
		PORTA &= ~(1<<Pin); //turn off pullup
    13c4:	9b b3       	in	r25, 0x1b	; 27
    13c6:	9a 23       	and	r25, r26
    13c8:	9b bb       	out	0x1b, r25	; 27
		ADMUX = Pin; //set mux to correct pin
    13ca:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1 << ADSC); // start the conversion
    13cc:	36 9a       	sbi	0x06, 6	; 6
		while((ADCSRA & (1 << ADSC)));
    13ce:	36 99       	sbic	0x06, 6	; 6
    13d0:	fe cf       	rjmp	.-4      	; 0x13ce <TouchRead+0x4c>
		totalValue += ADC;
    13d2:	e4 b1       	in	r30, 0x04	; 4
    13d4:	f5 b1       	in	r31, 0x05	; 5
    13d6:	0e 0f       	add	r16, r30
    13d8:	1f 1f       	adc	r17, r31
    13da:	21 1d       	adc	r18, r1
    13dc:	31 1d       	adc	r19, r1
	}
}

int TouchRead(int Pin, int samples){
	long totalValue = 0;
	for(int x=0; x<samples; x++){ 
    13de:	4f 5f       	subi	r20, 0xFF	; 255
    13e0:	5f 4f       	sbci	r21, 0xFF	; 255
    13e2:	64 17       	cp	r22, r20
    13e4:	75 07       	cpc	r23, r21
    13e6:	39 f7       	brne	.-50     	; 0x13b6 <TouchRead+0x34>
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <TouchRead+0x6e>
		break;
	}
}

int TouchRead(int Pin, int samples){
	long totalValue = 0;
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
    13ee:	98 01       	movw	r18, r16
		ADMUX = Pin; //set mux to correct pin
		ADCSRA |= (1 << ADSC); // start the conversion
		while((ADCSRA & (1 << ADSC)));
		totalValue += ADC;
	}
	return totalValue/samples;
    13f0:	6b 01       	movw	r12, r22
    13f2:	77 0f       	add	r23, r23
    13f4:	ee 08       	sbc	r14, r14
    13f6:	ff 08       	sbc	r15, r15
    13f8:	c9 01       	movw	r24, r18
    13fa:	b8 01       	movw	r22, r16
    13fc:	a7 01       	movw	r20, r14
    13fe:	96 01       	movw	r18, r12
    1400:	7c d5       	rcall	.+2808   	; 0x1efa <__divmodsi4>
}
    1402:	c9 01       	movw	r24, r18
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	08 95       	ret

00001412 <UpdateButtons>:
		
}
}

void UpdateButtons(){
	Slider1Value = TouchRead(SLIDER1PIN, 1) - Slider1Ref;
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	84 e0       	ldi	r24, 0x04	; 4
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b3 df       	rcall	.-154    	; 0x1382 <TouchRead>
    141c:	20 91 ca 00 	lds	r18, 0x00CA	; 0x8000ca <Slider1Ref>
    1420:	30 91 cb 00 	lds	r19, 0x00CB	; 0x8000cb <Slider1Ref+0x1>
    1424:	82 1b       	sub	r24, r18
    1426:	93 0b       	sbc	r25, r19
    1428:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <Slider1Value+0x1>
    142c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Slider1Value>
	Slider2Value = TouchRead(SLIDER2PIN, 1) - Slider2Ref;
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	85 e0       	ldi	r24, 0x05	; 5
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a4 df       	rcall	.-184    	; 0x1382 <TouchRead>
    143a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <Slider2Ref>
    143e:	30 91 c7 00 	lds	r19, 0x00C7	; 0x8000c7 <Slider2Ref+0x1>
    1442:	82 1b       	sub	r24, r18
    1444:	93 0b       	sbc	r25, r19
    1446:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <Slider2Value+0x1>
    144a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <Slider2Value>
	Slider3Value = TouchRead(SLIDER3PIN, 1) - Slider3Ref;
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	86 e0       	ldi	r24, 0x06	; 6
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	95 df       	rcall	.-214    	; 0x1382 <TouchRead>
    1458:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <Slider3Ref>
    145c:	30 91 c3 00 	lds	r19, 0x00C3	; 0x8000c3 <Slider3Ref+0x1>
    1460:	82 1b       	sub	r24, r18
    1462:	93 0b       	sbc	r25, r19
    1464:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <Slider3Value+0x1>
    1468:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <Slider3Value>
	ButtonValue = TouchRead(BUTTONPIN, 1) - ButtonRef;
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	87 e0       	ldi	r24, 0x07	; 7
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	86 df       	rcall	.-244    	; 0x1382 <TouchRead>
    1476:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <ButtonRef>
    147a:	30 91 cf 00 	lds	r19, 0x00CF	; 0x8000cf <ButtonRef+0x1>
    147e:	82 1b       	sub	r24, r18
    1480:	93 0b       	sbc	r25, r19
    1482:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <ButtonValue+0x1>
    1486:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <ButtonValue>
	
	if(Slider1Value > 100){
    148a:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Slider1Value>
    148e:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <Slider1Value+0x1>
    1492:	85 36       	cpi	r24, 0x65	; 101
    1494:	91 05       	cpc	r25, r1
    1496:	34 f0       	brlt	.+12     	; 0x14a4 <UpdateButtons+0x92>
		Slider1Touched = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Slider1Touched>
		SliderTouched = 1;
    149e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <SliderTouched>
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <UpdateButtons+0x96>
	} else {
		Slider1Touched = 0;
    14a4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Slider1Touched>
	}
	if(Slider2Value > 100){
    14a8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Slider2Value>
    14ac:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <Slider2Value+0x1>
    14b0:	85 36       	cpi	r24, 0x65	; 101
    14b2:	91 05       	cpc	r25, r1
    14b4:	34 f0       	brlt	.+12     	; 0x14c2 <UpdateButtons+0xb0>
		Slider2Touched = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <Slider2Touched>
		SliderTouched = 1;
    14bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <SliderTouched>
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <UpdateButtons+0xb4>
	} else {
		Slider2Touched = 0;
    14c2:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Slider2Touched>
	}
	if(Slider3Value > 100){
    14c6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Slider3Value>
    14ca:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <Slider3Value+0x1>
    14ce:	85 36       	cpi	r24, 0x65	; 101
    14d0:	91 05       	cpc	r25, r1
    14d2:	34 f0       	brlt	.+12     	; 0x14e0 <UpdateButtons+0xce>
		Slider3Touched = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <Slider3Touched>
		SliderTouched = 1;
    14da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <SliderTouched>
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <UpdateButtons+0xd2>
	} else {
		Slider3Touched = 0;
    14e0:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Slider3Touched>
	}
	if(ButtonValue > 100){
    14e4:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <ButtonValue>
    14e8:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <ButtonValue+0x1>
    14ec:	85 36       	cpi	r24, 0x65	; 101
    14ee:	91 05       	cpc	r25, r1
    14f0:	3c f0       	brlt	.+14     	; 0x1500 <UpdateButtons+0xee>
		ButtonTouched = 1;
    14f2:	21 e0       	ldi	r18, 0x01	; 1
    14f4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <ButtonTouched>
	} else {
		ButtonTouched = 0;
	}
	
	if((ButtonTouched == 1) & (ButtonValue < 100)){
    14f8:	84 36       	cpi	r24, 0x64	; 100
    14fa:	91 05       	cpc	r25, r1
    14fc:	24 f0       	brlt	.+8      	; 0x1506 <UpdateButtons+0xf4>
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <UpdateButtons+0xfe>
		Slider3Touched = 0;
	}
	if(ButtonValue > 100){
		ButtonTouched = 1;
	} else {
		ButtonTouched = 0;
    1500:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <ButtonTouched>
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <UpdateButtons+0xfe>
	}
	
	if((ButtonTouched == 1) & (ButtonValue < 100)){
		ButtonReleased = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <ButtonReleased>
		ButtonTouched = 0;
    150c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <ButtonTouched>
	}
	
	if((SliderTouched == 1) & (Slider1Value < 100) & (Slider2Value < 100) & (Slider3Value < 100)){
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <SliderTouched>
    1516:	91 30       	cpi	r25, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <UpdateButtons+0x10a>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	20 91 cc 00 	lds	r18, 0x00CC	; 0x8000cc <Slider1Value>
    1522:	30 91 cd 00 	lds	r19, 0x00CD	; 0x8000cd <Slider1Value+0x1>
    1526:	24 36       	cpi	r18, 0x64	; 100
    1528:	31 05       	cpc	r19, r1
    152a:	0c f0       	brlt	.+2      	; 0x152e <UpdateButtons+0x11c>
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	98 23       	and	r25, r24
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <Slider2Value>
    1536:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <Slider2Value+0x1>
    153a:	24 36       	cpi	r18, 0x64	; 100
    153c:	31 05       	cpc	r19, r1
    153e:	0c f0       	brlt	.+2      	; 0x1542 <UpdateButtons+0x130>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	89 23       	and	r24, r25
    1544:	81 f0       	breq	.+32     	; 0x1566 <UpdateButtons+0x154>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <Slider3Value>
    154c:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <Slider3Value+0x1>
    1550:	24 36       	cpi	r18, 0x64	; 100
    1552:	31 05       	cpc	r19, r1
    1554:	0c f0       	brlt	.+2      	; 0x1558 <UpdateButtons+0x146>
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	88 23       	and	r24, r24
    155a:	29 f0       	breq	.+10     	; 0x1566 <UpdateButtons+0x154>
		SliderReleased = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <SliderReleased>
		SliderTouched = 0;
    1562:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <SliderTouched>
    1566:	08 95       	ret

00001568 <TVBGone>:
		totalValue += ADC;
	}
	return totalValue/samples;
}

void TVBGone(){ 
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29

	 for (i=0; i<num_codes; i++) {   // for every POWER code in our collection
    1574:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <i>
    1578:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <num_codes>
    157c:	88 23       	and	r24, r24
    157e:	09 f4       	brne	.+2      	; 0x1582 <TVBGone+0x1a>
    1580:	c5 c0       	rjmp	.+394    	; 0x170c <TVBGone+0x1a4>
    1582:	e0 e0       	ldi	r30, 0x00	; 0
			 // read the onTime and offTime from the program memory
			 ontime = pgm_read_word(thecode_p+(j*4)+1);
			 offtime = pgm_read_word(thecode_p+(j*4)+3);

			 // transmit this codeElement (ontime and offtime)
			 IRPulse = 1;
    1584:	ee 24       	eor	r14, r14
    1586:	e3 94       	inc	r14
    1588:	fe 2c       	mov	r15, r14
			 LED3PORT &= ~(1<<LED3PIN);
			 SliderReleased = 0;
			 break;
		 }
		 
		 OCR1A = 104; //Put timer back to normal
    158a:	08 e6       	ldi	r16, 0x68	; 104
    158c:	10 e0       	ldi	r17, 0x00	; 0
		 IRPulseCounter = 20000; //delay ~250mS between codes
    158e:	c0 e2       	ldi	r28, 0x20	; 32
    1590:	de e4       	ldi	r29, 0x4E	; 78

	 for (i=0; i<num_codes; i++) {   // for every POWER code in our collection
		 //wdt_reset();        // make sure we dont get 'stuck' in a code

		 //quickflashLED(); // visible indication that a code is being output
		 PGM_P thecode_p = pgm_read_word(powerCodes+i);     // point to next POWER code
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	ee 5d       	subi	r30, 0xDE	; 222
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	85 91       	lpm	r24, Z+
    159e:	94 91       	lpm	r25, Z
    15a0:	9c 01       	movw	r18, r24

		 uint8_t freq = pgm_read_byte(thecode_p);
    15a2:	fc 01       	movw	r30, r24
    15a4:	84 91       	lpm	r24, Z
		 //uint8_t freq = pgm_read_byte(powerCodes+i);
		 // set OCR for Timer1 and Timer0 to output this POWER code's carrier frequency
		 OCR1A = freq;
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9b bd       	out	0x2b, r25	; 43
    15aa:	8a bd       	out	0x2a, r24	; 42
		 
		 // transmit all codeElements for this POWER code (a codeElement is an onTime and an offTime)
		 // transmitting onTime means pulsing the IR emitters at the carrier frequency for the length of time specified in onTime
		 // transmitting offTime means no output from the IR emitters for the length of time specified in offTime
		 j = 0;  // index into codeElements of this POWER code
    15ac:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <j>
		 do {
			 // read the onTime and offTime from the program memory
			 ontime = pgm_read_word(thecode_p+(j*4)+1);
    15b0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <j>
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	fc 01       	movw	r30, r24
    15c0:	31 96       	adiw	r30, 0x01	; 1
    15c2:	e2 0f       	add	r30, r18
    15c4:	f3 1f       	adc	r31, r19
    15c6:	45 91       	lpm	r20, Z+
    15c8:	54 91       	lpm	r21, Z
    15ca:	50 93 e5 00 	sts	0x00E5, r21	; 0x8000e5 <ontime+0x1>
    15ce:	40 93 e4 00 	sts	0x00E4, r20	; 0x8000e4 <ontime>
			 offtime = pgm_read_word(thecode_p+(j*4)+3);
    15d2:	fc 01       	movw	r30, r24
    15d4:	33 96       	adiw	r30, 0x03	; 3
    15d6:	e2 0f       	add	r30, r18
    15d8:	f3 1f       	adc	r31, r19
    15da:	85 91       	lpm	r24, Z+
    15dc:	94 91       	lpm	r25, Z
    15de:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <offtime+0x1>
    15e2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <offtime>

			 // transmit this codeElement (ontime and offtime)
			 IRPulse = 1;
    15e6:	f0 92 d4 00 	sts	0x00D4, r15	; 0x8000d4 <IRPulse>
			 
			 // keep transmitting carrier for onTime
			 IRPulseCounter = ontime;
    15ea:	50 93 d3 00 	sts	0x00D3, r21	; 0x8000d3 <IRPulseCounter+0x1>
    15ee:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <IRPulseCounter>
			 while(IRPulseCounter > 0){};
    15f2:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <IRPulseCounter>
    15f6:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <IRPulseCounter+0x1>
    15fa:	89 2b       	or	r24, r25
    15fc:	d1 f7       	brne	.-12     	; 0x15f2 <TVBGone+0x8a>

			 IRPulse = 0;         
    15fe:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <IRPulse>
			 IRLEDPORT &= ~(1<<IRLEDPIN); // turn off IR LED
    1602:	d8 98       	cbi	0x1b, 0	; 27

			 IRPulseCounter = offtime;
    1604:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <offtime>
    1608:	50 91 e3 00 	lds	r21, 0x00E3	; 0x8000e3 <offtime+0x1>
    160c:	50 93 d3 00 	sts	0x00D3, r21	; 0x8000d3 <IRPulseCounter+0x1>
    1610:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <IRPulseCounter>
			 while(IRPulseCounter > 0){};
    1614:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <IRPulseCounter>
    1618:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <IRPulseCounter+0x1>
    161c:	89 2b       	or	r24, r25
    161e:	d1 f7       	brne	.-12     	; 0x1614 <TVBGone+0xac>
				 
			 j++;
    1620:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <j>
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <j>
		 } while ( offtime != 0 );  // offTime = 0 signifies last codeElement for a POWER code
    162a:	45 2b       	or	r20, r21
    162c:	09 f0       	breq	.+2      	; 0x1630 <TVBGone+0xc8>
    162e:	c0 cf       	rjmp	.-128    	; 0x15b0 <TVBGone+0x48>
         
		 IRLEDPORT &= ~(1<<IRLEDPIN); // turn off IR LED
    1630:	d8 98       	cbi	0x1b, 0	; 27
		 
		 UpdateButtons();
    1632:	ef de       	rcall	.-546    	; 0x1412 <UpdateButtons>
		 
		 if(Slider2Touched == 1){
    1634:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Slider2Touched>
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	11 f4       	brne	.+4      	; 0x1640 <TVBGone+0xd8>
			 LED2PORT |= 1<<LED2PIN;
    163c:	da 9a       	sbi	0x1b, 2	; 27
    163e:	01 c0       	rjmp	.+2      	; 0x1642 <TVBGone+0xda>
		 } else {
			 LED2PORT &= ~(1<<LED2PIN);
    1640:	da 98       	cbi	0x1b, 2	; 27
		 }
		 if(Slider3Touched == 1){
    1642:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Slider3Touched>
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	11 f4       	brne	.+4      	; 0x164e <TVBGone+0xe6>
			 LED1PORT |= 1<<LED1PIN;
    164a:	d9 9a       	sbi	0x1b, 1	; 27
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <TVBGone+0xe8>
		 } else {
			 LED1PORT &= ~(1<<LED1PIN);
    164e:	d9 98       	cbi	0x1b, 1	; 27
		 }
		 if(Slider1Touched == 1){
    1650:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Slider1Touched>
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	19 f4       	brne	.+6      	; 0x165e <TVBGone+0xf6>
			 TVContinuous = 1;
    1658:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <TVContinuous>
    165c:	05 c0       	rjmp	.+10     	; 0x1668 <TVBGone+0x100>
		 }
		 
		 if(TVContinuous == 1){
    165e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <TVContinuous>
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	09 f0       	breq	.+2      	; 0x1668 <TVBGone+0x100>
    1666:	5c c0       	rjmp	.+184    	; 0x1720 <TVBGone+0x1b8>
			 LED1PORT |= 1<<LED1PIN;
    1668:	d9 9a       	sbi	0x1b, 1	; 27
			 LED2PORT |= 1<<LED2PIN;
    166a:	da 9a       	sbi	0x1b, 2	; 27
			 LED3PORT |= 1<<LED3PIN;
    166c:	db 9a       	sbi	0x1b, 3	; 27
		 }
		 
		 if((SliderTouched == 1) & (SliderReleased == 1)){
    166e:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <SliderTouched>
    1672:	8e 2d       	mov	r24, r14
    1674:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <SliderReleased>
    1678:	91 30       	cpi	r25, 0x01	; 1
    167a:	09 f0       	breq	.+2      	; 0x167e <TVBGone+0x116>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	88 23       	and	r24, r24
    1680:	e9 f0       	breq	.+58     	; 0x16bc <TVBGone+0x154>
    1682:	8e 2d       	mov	r24, r14
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	09 f0       	breq	.+2      	; 0x168a <TVBGone+0x122>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	88 23       	and	r24, r24
    168c:	b9 f0       	breq	.+46     	; 0x16bc <TVBGone+0x154>
			 if(TVContinuous == 1){
    168e:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <TVContinuous>
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	99 f4       	brne	.+38     	; 0x16bc <TVBGone+0x154>
				 SliderReleased = 0;
    1696:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <SliderReleased>
				 LED1PORT &= ~(1<<LED1PIN);
    169a:	d9 98       	cbi	0x1b, 1	; 27
				 LED2PORT &= ~(1<<LED2PIN);
    169c:	da 98       	cbi	0x1b, 2	; 27
				 LED3PORT &= ~(1<<LED3PIN);
    169e:	db 98       	cbi	0x1b, 3	; 27
				 while(SliderReleased == 0) UpdateButtons();
    16a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <SliderReleased>
    16a4:	81 11       	cpse	r24, r1
    16a6:	05 c0       	rjmp	.+10     	; 0x16b2 <TVBGone+0x14a>
    16a8:	b4 de       	rcall	.-664    	; 0x1412 <UpdateButtons>
    16aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <SliderReleased>
    16ae:	88 23       	and	r24, r24
    16b0:	d9 f3       	breq	.-10     	; 0x16a8 <TVBGone+0x140>
				 SliderReleased = 0;
    16b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <SliderReleased>
				 TVContinuous = 0;
    16b6:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TVContinuous>
				 break;
    16ba:	28 c0       	rjmp	.+80     	; 0x170c <TVBGone+0x1a4>
			 }
		 }
		 
		 
		 if((SliderTouched == 0) & (TVContinuous == 0) ){
    16bc:	8e 2d       	mov	r24, r14
    16be:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <TVContinuous>
    16c2:	91 11       	cpse	r25, r1
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	88 23       	and	r24, r24
    16c8:	59 f0       	breq	.+22     	; 0x16e0 <TVBGone+0x178>
    16ca:	8e 2d       	mov	r24, r14
    16cc:	21 11       	cpse	r18, r1
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	88 23       	and	r24, r24
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <TVBGone+0x178>
			 LED1PORT &= ~(1<<LED1PIN);
    16d4:	d9 98       	cbi	0x1b, 1	; 27
			 LED2PORT &= ~(1<<LED2PIN);
    16d6:	da 98       	cbi	0x1b, 2	; 27
			 LED3PORT &= ~(1<<LED3PIN);
    16d8:	db 98       	cbi	0x1b, 3	; 27
			 SliderReleased = 0;
    16da:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <SliderReleased>
			 break;
    16de:	16 c0       	rjmp	.+44     	; 0x170c <TVBGone+0x1a4>
		 }
		 
		 OCR1A = 104; //Put timer back to normal
    16e0:	1b bd       	out	0x2b, r17	; 43
    16e2:	0a bd       	out	0x2a, r16	; 42
		 IRPulseCounter = 20000; //delay ~250mS between codes
    16e4:	d0 93 d3 00 	sts	0x00D3, r29	; 0x8000d3 <IRPulseCounter+0x1>
    16e8:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <IRPulseCounter>
		 while(IRPulseCounter > 0){};
    16ec:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <IRPulseCounter>
    16f0:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <IRPulseCounter+0x1>
    16f4:	89 2b       	or	r24, r25
    16f6:	d1 f7       	brne	.-12     	; 0x16ec <TVBGone+0x184>
	return totalValue/samples;
}

void TVBGone(){ 

	 for (i=0; i<num_codes; i++) {   // for every POWER code in our collection
    16f8:	e0 91 e6 00 	lds	r30, 0x00E6	; 0x8000e6 <i>
    16fc:	ef 5f       	subi	r30, 0xFF	; 255
    16fe:	e0 93 e6 00 	sts	0x00E6, r30	; 0x8000e6 <i>
    1702:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <num_codes>
    1706:	e8 17       	cp	r30, r24
    1708:	08 f4       	brcc	.+2      	; 0x170c <TVBGone+0x1a4>
    170a:	43 cf       	rjmp	.-378    	; 0x1592 <TVBGone+0x2a>
		 OCR1A = 104; //Put timer back to normal
		 IRPulseCounter = 20000; //delay ~250mS between codes
		 while(IRPulseCounter > 0){};
	 }
	 
	 LED1PORT &= ~(1<<LED1PIN);
    170c:	d9 98       	cbi	0x1b, 1	; 27
	 LED2PORT &= ~(1<<LED2PIN);
    170e:	da 98       	cbi	0x1b, 2	; 27
	 LED3PORT &= ~(1<<LED3PIN);
    1710:	db 98       	cbi	0x1b, 3	; 27
	 TVContinuous = 0;
    1712:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <TVContinuous>
	 OCR1A = 104; //Put timer back to normal
    1716:	88 e6       	ldi	r24, 0x68	; 104
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9b bd       	out	0x2b, r25	; 43
    171c:	8a bd       	out	0x2a, r24	; 42
}
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <TVBGone+0x1be>
			 LED1PORT |= 1<<LED1PIN;
			 LED2PORT |= 1<<LED2PIN;
			 LED3PORT |= 1<<LED3PIN;
		 }
		 
		 if((SliderTouched == 1) & (SliderReleased == 1)){
    1720:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <SliderTouched>
    1724:	cb cf       	rjmp	.-106    	; 0x16bc <TVBGone+0x154>
	 LED1PORT &= ~(1<<LED1PIN);
	 LED2PORT &= ~(1<<LED2PIN);
	 LED3PORT &= ~(1<<LED3PIN);
	 TVContinuous = 0;
	 OCR1A = 104; //Put timer back to normal
}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	08 95       	ret

00001734 <main>:
#endif

int main(void)
{
    //Setup
	DDRA |= 1<<LED1PIN | 1<<LED2PIN | 1<<LED3PIN | 1<<IRLEDPIN; //Set LED pins to OUTPUT
    1734:	8a b3       	in	r24, 0x1a	; 26
    1736:	8f 60       	ori	r24, 0x0F	; 15
    1738:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 1<<BUZZPIN; //Set Buzzer pin to OUTPUT
    173a:	ba 9a       	sbi	0x17, 2	; 23

	//Setup timer1 for LEDs
	TCCR1A = 0;
    173c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
    173e:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = 0;
    1740:	1d bc       	out	0x2d, r1	; 45
    1742:	1c bc       	out	0x2c, r1	; 44
	// 76190.47619047618 Hz (8000000/((104+1)*1))
	OCR1A = 104;
    1744:	88 e6       	ldi	r24, 0x68	; 104
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9b bd       	out	0x2b, r25	; 43
    174a:	8a bd       	out	0x2a, r24	; 42
	// CTC
	TCCR1B |= (1 << WGM12);
    174c:	8e b5       	in	r24, 0x2e	; 46
    174e:	88 60       	ori	r24, 0x08	; 8
    1750:	8e bd       	out	0x2e, r24	; 46
	// Prescaler 1
	TCCR1B |= (1 << CS10);
    1752:	8e b5       	in	r24, 0x2e	; 46
    1754:	81 60       	ori	r24, 0x01	; 1
    1756:	8e bd       	out	0x2e, r24	; 46
	// Output Compare Match A Interrupt Enable
	TIMSK1 |= (1 << OCIE1A);
    1758:	61 9a       	sbi	0x0c, 1	; 12

	//Setup timer0 for Sound
	TCCR0A |= 1<<COM0A1; //non-inverting mode (pin OC0A)
    175a:	80 b7       	in	r24, 0x30	; 48
    175c:	80 68       	ori	r24, 0x80	; 128
    175e:	80 bf       	out	0x30, r24	; 48
	TCCR0A |= 1<<WGM01 | 1<<WGM00; //Fast PWM
    1760:	80 b7       	in	r24, 0x30	; 48
    1762:	83 60       	ori	r24, 0x03	; 3
    1764:	80 bf       	out	0x30, r24	; 48
	OCR0A = 128;
    1766:	80 e8       	ldi	r24, 0x80	; 128
    1768:	86 bf       	out	0x36, r24	; 54


	sei(); //enable interrupts
    176a:	78 94       	sei
	
	ADCSRA |= (1 << ADPS1) | (1 << ADPS2); //set prescaler to 64 (8MHz/64 = 125KHz)
    176c:	86 b1       	in	r24, 0x06	; 6
    176e:	86 60       	ori	r24, 0x06	; 6
    1770:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN); //enable ADC
    1772:	37 9a       	sbi	0x06, 7	; 6

	//Get baseline values at startup
	ButtonRef = TouchRead(BUTTONPIN, 50);
    1774:	62 e3       	ldi	r22, 0x32	; 50
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	87 e0       	ldi	r24, 0x07	; 7
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 de       	rcall	.-1020   	; 0x1382 <TouchRead>
    177e:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <ButtonRef+0x1>
    1782:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <ButtonRef>
	Slider1Ref = TouchRead(SLIDER1PIN, 50);
    1786:	62 e3       	ldi	r22, 0x32	; 50
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	84 e0       	ldi	r24, 0x04	; 4
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	f9 dd       	rcall	.-1038   	; 0x1382 <TouchRead>
    1790:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <Slider1Ref+0x1>
    1794:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <Slider1Ref>
	Slider2Ref = TouchRead(SLIDER2PIN, 50);
    1798:	62 e3       	ldi	r22, 0x32	; 50
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	85 e0       	ldi	r24, 0x05	; 5
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	f0 dd       	rcall	.-1056   	; 0x1382 <TouchRead>
    17a2:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <Slider2Ref+0x1>
    17a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <Slider2Ref>
	Slider3Ref = TouchRead(SLIDER3PIN, 50);
    17aa:	62 e3       	ldi	r22, 0x32	; 50
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	e7 dd       	rcall	.-1074   	; 0x1382 <TouchRead>
    17b4:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <Slider3Ref+0x1>
    17b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <Slider3Ref>

	//Get last Mode from EEPROM
	mode = eeprom_read_byte((uint8_t)0);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	da d3       	rcall	.+1972   	; 0x1f76 <eeprom_read_byte>
    17c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mode>
	if((mode	> 3) | (mode < 1)){
    17c6:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mode>
    17ca:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <mode>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	24 30       	cpi	r18, 0x04	; 4
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <main+0xa2>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	81 11       	cpse	r24, r1
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <main+0xb0>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	91 11       	cpse	r25, r1
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	88 23       	and	r24, r24
    17e2:	19 f0       	breq	.+6      	; 0x17ea <main+0xb6>
		mode = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mode>
				break;
			}
			if(ButtonPressedTime == 0) ButtonPressedTime = millis;
			if(millis - ButtonPressedTime > ButtonPressedDelay){
				mode += 1;
				if(mode > 3) mode=1;
    17ea:	11 e0       	ldi	r17, 0x01	; 1
				TCCR0B |= 1<<CS00 | 1<<CS01;
				break;
				case 2:
				#ifdef goon
				GoonMorse = 1;
				MorseDelay = 50;
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f2 e3       	ldi	r31, 0x32	; 50
    17f0:	af 2e       	mov	r10, r31
    17f2:	f0 2d       	mov	r31, r0
				#else
				pulseDelay = 3;
				pulse = 1;
				#endif
				buzzWidth = 10;
    17f4:	0f 2e       	mov	r0, r31
    17f6:	fa e0       	ldi	r31, 0x0A	; 10
    17f8:	bf 2e       	mov	r11, r31
    17fa:	f0 2d       	mov	r31, r0
		if(Slider1Touched == 1){
			LED3PORT |= 1<<LED3PIN;
			switch(mode)
			{
				case 1:
				pulseDelay = 7;
    17fc:	07 e0       	ldi	r16, 0x07	; 7
				pulse = 1;
    17fe:	c1 e0       	ldi	r28, 0x01	; 1
    1800:	d0 e0       	ldi	r29, 0x00	; 0
				TCCR0B |= 1<<CS00 | 1<<CS01;
				break;
				case 2:
				#ifdef goon
				GoonMorse = 1;
				MorseDelay = 100;
    1802:	0f 2e       	mov	r0, r31
    1804:	f4 e6       	ldi	r31, 0x64	; 100
    1806:	cf 2e       	mov	r12, r31
    1808:	f0 2d       	mov	r31, r0
				#else
				pulseDelay = 5;
				pulse = 1;
				#endif
				buzzWidth = 20;
    180a:	0f 2e       	mov	r0, r31
    180c:	f4 e1       	ldi	r31, 0x14	; 20
    180e:	df 2e       	mov	r13, r31
    1810:	f0 2d       	mov	r31, r0
				TCCR0B |= 1<<CS00 | 1<<CS01;
				break;
				case 2: //Bling
				#ifdef goon
				GoonMorse = 1;
				MorseDelay = 200;
    1812:	0f 2e       	mov	r0, r31
    1814:	f8 ec       	ldi	r31, 0xC8	; 200
    1816:	ef 2e       	mov	r14, r31
    1818:	f0 2d       	mov	r31, r0
				#else 
				pulseDelay = 7;
				pulse = 1;
				#endif
				buzzWidth = 40;
    181a:	0f 2e       	mov	r0, r31
    181c:	f8 e2       	ldi	r31, 0x28	; 40
    181e:	ff 2e       	mov	r15, r31
    1820:	f0 2d       	mov	r31, r0
	
	
	//Main Loop
    while (1) 
    {
		if(millis > nextButtonReadTime){
    1822:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1826:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    182a:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    182e:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1832:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <nextButtonReadTime>
    1836:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <nextButtonReadTime+0x1>
    183a:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <nextButtonReadTime+0x2>
    183e:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <nextButtonReadTime+0x3>
    1842:	84 17       	cp	r24, r20
    1844:	95 07       	cpc	r25, r21
    1846:	a6 07       	cpc	r26, r22
    1848:	b7 07       	cpc	r27, r23
    184a:	08 f0       	brcs	.+2      	; 0x184e <main+0x11a>
    184c:	b1 c1       	rjmp	.+866    	; 0x1bb0 <main+0x47c>
			nextButtonReadTime = millis + buttonReadDelay;
    184e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1852:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1856:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    185a:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    185e:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <buttonReadDelay>
    1862:	82 0f       	add	r24, r18
    1864:	91 1d       	adc	r25, r1
    1866:	a1 1d       	adc	r26, r1
    1868:	b1 1d       	adc	r27, r1
    186a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <nextButtonReadTime>
    186e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <nextButtonReadTime+0x1>
    1872:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <nextButtonReadTime+0x2>
    1876:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <nextButtonReadTime+0x3>
			UpdateButtons();
    187a:	cb dd       	rcall	.-1130   	; 0x1412 <UpdateButtons>

		if(Slider3Touched == 1){
    187c:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Slider3Touched>
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	19 f5       	brne	.+70     	; 0x18ca <main+0x196>
			LED1PORT |= 1<<LED1PIN;
    1884:	d9 9a       	sbi	0x1b, 1	; 27
			switch(mode)
    1886:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    188a:	82 30       	cpi	r24, 0x02	; 2
    188c:	81 f0       	breq	.+32     	; 0x18ae <main+0x17a>
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	d1 f0       	breq	.+52     	; 0x18c6 <main+0x192>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	f9 f4       	brne	.+62     	; 0x18d4 <main+0x1a0>
			{
				case 1: //Screwdriver
				pulseDelay = 7;
    1896:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <pulseDelay>
				pulse = 1;
    189a:	d0 93 b5 00 	sts	0x00B5, r29	; 0x8000b5 <pulse+0x1>
    189e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <pulse>
				buzzWidth = 40;
    18a2:	f0 92 af 00 	sts	0x00AF, r15	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    18a6:	83 b7       	in	r24, 0x33	; 51
    18a8:	83 60       	ori	r24, 0x03	; 3
    18aa:	83 bf       	out	0x33, r24	; 51
				break;
    18ac:	13 c0       	rjmp	.+38     	; 0x18d4 <main+0x1a0>
				case 2: //Bling
				#ifdef goon
				GoonMorse = 1;
    18ae:	10 93 a1 00 	sts	0x00A1, r17	; 0x8000a1 <GoonMorse>
				MorseDelay = 200;
    18b2:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <MorseDelay>
				#else 
				pulseDelay = 7;
				pulse = 1;
				#endif
				buzzWidth = 40;
    18b6:	f0 92 af 00 	sts	0x00AF, r15	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    18ba:	83 b7       	in	r24, 0x33	; 51
    18bc:	83 60       	ori	r24, 0x03	; 3
    18be:	83 bf       	out	0x33, r24	; 51
				BlingTimeDelay = 200;
    18c0:	e0 92 61 00 	sts	0x0061, r14	; 0x800061 <BlingTimeDelay>
				break;
    18c4:	07 c0       	rjmp	.+14     	; 0x18d4 <main+0x1a0>
				case 3: //TVBGone
				TVBGone();
    18c6:	50 de       	rcall	.-864    	; 0x1568 <TVBGone>
				break;
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <main+0x1a0>
			}
			
			} else {
			if(mode != 2) LED1PORT &= ~(1<<LED1PIN);
    18ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <main+0x1a0>
    18d2:	d9 98       	cbi	0x1b, 1	; 27
		}

		if(Slider2Touched == 1){
    18d4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <Slider2Touched>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	19 f5       	brne	.+70     	; 0x1922 <main+0x1ee>
			LED2PORT |= 1<<LED2PIN;
    18dc:	da 9a       	sbi	0x1b, 2	; 27
			switch(mode)
    18de:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	81 f0       	breq	.+32     	; 0x1906 <main+0x1d2>
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	d1 f0       	breq	.+52     	; 0x191e <main+0x1ea>
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	f9 f4       	brne	.+62     	; 0x192c <main+0x1f8>
			{
				case 1:
				pulseDelay = 7;
    18ee:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <pulseDelay>
				pulse = 1;
    18f2:	d0 93 b5 00 	sts	0x00B5, r29	; 0x8000b5 <pulse+0x1>
    18f6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <pulse>
				buzzWidth = 20;
    18fa:	d0 92 af 00 	sts	0x00AF, r13	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    18fe:	83 b7       	in	r24, 0x33	; 51
    1900:	83 60       	ori	r24, 0x03	; 3
    1902:	83 bf       	out	0x33, r24	; 51
				break;
    1904:	13 c0       	rjmp	.+38     	; 0x192c <main+0x1f8>
				case 2:
				#ifdef goon
				GoonMorse = 1;
    1906:	10 93 a1 00 	sts	0x00A1, r17	; 0x8000a1 <GoonMorse>
				MorseDelay = 100;
    190a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <MorseDelay>
				#else
				pulseDelay = 5;
				pulse = 1;
				#endif
				buzzWidth = 20;
    190e:	d0 92 af 00 	sts	0x00AF, r13	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    1912:	83 b7       	in	r24, 0x33	; 51
    1914:	83 60       	ori	r24, 0x03	; 3
    1916:	83 bf       	out	0x33, r24	; 51
				BlingTimeDelay = 100;
    1918:	c0 92 61 00 	sts	0x0061, r12	; 0x800061 <BlingTimeDelay>
				break;
    191c:	07 c0       	rjmp	.+14     	; 0x192c <main+0x1f8>
				case 3:
				TVBGone();
    191e:	24 de       	rcall	.-952    	; 0x1568 <TVBGone>
				break;
    1920:	05 c0       	rjmp	.+10     	; 0x192c <main+0x1f8>
			}
			} else {
			if(mode != 2) LED2PORT &= ~(1<<LED2PIN);
    1922:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	09 f0       	breq	.+2      	; 0x192c <main+0x1f8>
    192a:	da 98       	cbi	0x1b, 2	; 27
		}

		if(Slider1Touched == 1){
    192c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Slider1Touched>
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	19 f5       	brne	.+70     	; 0x197a <main+0x246>
			LED3PORT |= 1<<LED3PIN;
    1934:	db 9a       	sbi	0x1b, 3	; 27
			switch(mode)
    1936:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	81 f0       	breq	.+32     	; 0x195e <main+0x22a>
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	d1 f0       	breq	.+52     	; 0x1976 <main+0x242>
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	f9 f4       	brne	.+62     	; 0x1984 <main+0x250>
			{
				case 1:
				pulseDelay = 7;
    1946:	00 93 67 00 	sts	0x0067, r16	; 0x800067 <pulseDelay>
				pulse = 1;
    194a:	d0 93 b5 00 	sts	0x00B5, r29	; 0x8000b5 <pulse+0x1>
    194e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <pulse>
				buzzWidth = 10;
    1952:	b0 92 af 00 	sts	0x00AF, r11	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    1956:	83 b7       	in	r24, 0x33	; 51
    1958:	83 60       	ori	r24, 0x03	; 3
    195a:	83 bf       	out	0x33, r24	; 51
				break;
    195c:	13 c0       	rjmp	.+38     	; 0x1984 <main+0x250>
				case 2:
				#ifdef goon
				GoonMorse = 1;
    195e:	10 93 a1 00 	sts	0x00A1, r17	; 0x8000a1 <GoonMorse>
				MorseDelay = 50;
    1962:	a0 92 60 00 	sts	0x0060, r10	; 0x800060 <MorseDelay>
				#else
				pulseDelay = 3;
				pulse = 1;
				#endif
				buzzWidth = 10;
    1966:	b0 92 af 00 	sts	0x00AF, r11	; 0x8000af <buzzWidth>
				TCCR0B |= 1<<CS00 | 1<<CS01;
    196a:	83 b7       	in	r24, 0x33	; 51
    196c:	83 60       	ori	r24, 0x03	; 3
    196e:	83 bf       	out	0x33, r24	; 51
				BlingTimeDelay = 50;
    1970:	a0 92 61 00 	sts	0x0061, r10	; 0x800061 <BlingTimeDelay>
				break;
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <main+0x250>
				case 3:
				TVBGone();
    1976:	f8 dd       	rcall	.-1040   	; 0x1568 <TVBGone>
				break;
    1978:	05 c0       	rjmp	.+10     	; 0x1984 <main+0x250>
			}
			} else {
				if(mode != 2) LED3PORT &= ~(1<<LED3PIN);
    197a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	09 f0       	breq	.+2      	; 0x1984 <main+0x250>
    1982:	db 98       	cbi	0x1b, 3	; 27
			//pulse = 0;
			//TCCR0B = 0;
		}

		//if((Slider1Value < 100) & (Slider2Value < 100) & (Slider3Value < 100)){
		if(SliderReleased == 1){
    1984:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <SliderReleased>
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	59 f4       	brne	.+22     	; 0x19a2 <main+0x26e>
			SliderReleased = 0;
    198c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <SliderReleased>
			pulse = 0;
    1990:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <pulse+0x1>
    1994:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <pulse>
			TCCR0B = 0;
    1998:	13 be       	out	0x33, r1	; 51
			#ifdef goon
			GoonMorse = 0;
    199a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <GoonMorse>
			MorseCounter = 0;
    199e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
			#endif
		}

		//if(ButtonValue > 100){
		if(ButtonTouched == 1){
    19a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <ButtonTouched>
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <main+0x278>
    19aa:	ea c0       	rjmp	.+468    	; 0x1b80 <main+0x44c>
			switch(mode)
    19ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	31 f0       	breq	.+12     	; 0x19c0 <main+0x28c>
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	e1 f0       	breq	.+56     	; 0x19f0 <main+0x2bc>
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	d9 f4       	brne	.+54     	; 0x19f2 <main+0x2be>
			{
				case 1:
				LED1PORT |= 1<<LED1PIN;
    19bc:	d9 9a       	sbi	0x1b, 1	; 27
				break;
    19be:	19 c0       	rjmp	.+50     	; 0x19f2 <main+0x2be>
				case 2:
				LED2PORT |= 1<<LED2PIN;
    19c0:	da 9a       	sbi	0x1b, 2	; 27
				LED3PORT &= ~(1<<LED3PIN);
    19c2:	db 98       	cbi	0x1b, 3	; 27
				LED1PORT &= ~(1<<LED1PIN);
    19c4:	d9 98       	cbi	0x1b, 1	; 27
				BlingTimeCounter += 200;
    19c6:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <BlingTimeCounter>
    19ca:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <BlingTimeCounter+0x1>
    19ce:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <BlingTimeCounter+0x2>
    19d2:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <BlingTimeCounter+0x3>
    19d6:	88 53       	subi	r24, 0x38	; 56
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	af 4f       	sbci	r26, 0xFF	; 255
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <BlingTimeCounter>
    19e2:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <BlingTimeCounter+0x1>
    19e6:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <BlingTimeCounter+0x2>
    19ea:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <BlingTimeCounter+0x3>
				break;
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <main+0x2be>
				case 3:
				LED3PORT |= 1<<LED3PIN;
    19f0:	db 9a       	sbi	0x1b, 3	; 27
				break;
			}
			if(ButtonPressedTime == 0) ButtonPressedTime = millis;
    19f2:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <ButtonPressedTime>
    19f6:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <ButtonPressedTime+0x1>
    19fa:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <ButtonPressedTime+0x2>
    19fe:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <ButtonPressedTime+0x3>
    1a02:	89 2b       	or	r24, r25
    1a04:	8a 2b       	or	r24, r26
    1a06:	8b 2b       	or	r24, r27
    1a08:	81 f4       	brne	.+32     	; 0x1a2a <main+0x2f6>
    1a0a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1a0e:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1a12:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1a16:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1a1a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <ButtonPressedTime>
    1a1e:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <ButtonPressedTime+0x1>
    1a22:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <ButtonPressedTime+0x2>
    1a26:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <ButtonPressedTime+0x3>
			if(millis - ButtonPressedTime > ButtonPressedDelay){
    1a2a:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1a2e:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1a32:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1a36:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1a3a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <ButtonPressedTime>
    1a3e:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <ButtonPressedTime+0x1>
    1a42:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <ButtonPressedTime+0x2>
    1a46:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <ButtonPressedTime+0x3>
    1a4a:	48 1b       	sub	r20, r24
    1a4c:	59 0b       	sbc	r21, r25
    1a4e:	6a 0b       	sbc	r22, r26
    1a50:	7b 0b       	sbc	r23, r27
    1a52:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ButtonPressedDelay>
    1a56:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ButtonPressedDelay+0x1>
    1a5a:	09 2e       	mov	r0, r25
    1a5c:	00 0c       	add	r0, r0
    1a5e:	aa 0b       	sbc	r26, r26
    1a60:	bb 0b       	sbc	r27, r27
    1a62:	84 17       	cp	r24, r20
    1a64:	95 07       	cpc	r25, r21
    1a66:	a6 07       	cpc	r26, r22
    1a68:	b7 07       	cpc	r27, r23
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <main+0x33a>
    1a6c:	a1 c0       	rjmp	.+322    	; 0x1bb0 <main+0x47c>
				mode += 1;
    1a6e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mode>
				if(mode > 3) mode=1;
    1a78:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	10 f0       	brcs	.+4      	; 0x1a84 <main+0x350>
    1a80:	10 93 64 00 	sts	0x0064, r17	; 0x800064 <mode>
				//Write mode to EEPROM
				eeprom_update_byte((uint8_t*)0, mode);
    1a84:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <mode>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	7c d2       	rcall	.+1272   	; 0x1f86 <eeprom_update_byte>
				LED1PORT &= ~(1<<LED1PIN);
    1a8e:	d9 98       	cbi	0x1b, 1	; 27
				LED2PORT &= ~(1<<LED2PIN);
    1a90:	da 98       	cbi	0x1b, 2	; 27
				LED3PORT &= ~(1<<LED3PIN);
    1a92:	db 98       	cbi	0x1b, 3	; 27
				switch(mode)
    1a94:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1a98:	82 30       	cpi	r24, 0x02	; 2
    1a9a:	51 f1       	breq	.+84     	; 0x1af0 <main+0x3bc>
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <main+0x36e>
    1aa0:	4b c0       	rjmp	.+150    	; 0x1b38 <main+0x404>
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <main+0x374>
    1aa6:	84 c0       	rjmp	.+264    	; 0x1bb0 <main+0x47c>
					{
						case 1:
						LED1PORT |= 1<<LED1PIN;
    1aa8:	d9 9a       	sbi	0x1b, 1	; 27
						ledDelay = millis + 500;
    1aaa:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1aae:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1ab2:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1ab6:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1aba:	4c 50       	subi	r20, 0x0C	; 12
    1abc:	5e 4f       	sbci	r21, 0xFE	; 254
    1abe:	6f 4f       	sbci	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <ledDelay>
    1ac6:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <ledDelay+0x1>
    1aca:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <ledDelay+0x2>
    1ace:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <ledDelay+0x3>
						while(ledDelay > millis){};
    1ad2:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1ad6:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1ada:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1ade:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1ae2:	84 17       	cp	r24, r20
    1ae4:	95 07       	cpc	r25, r21
    1ae6:	a6 07       	cpc	r26, r22
    1ae8:	b7 07       	cpc	r27, r23
    1aea:	98 f3       	brcs	.-26     	; 0x1ad2 <main+0x39e>
						LED1PORT &= ~(1<<LED1PIN);
    1aec:	d9 98       	cbi	0x1b, 1	; 27
						break;
    1aee:	60 c0       	rjmp	.+192    	; 0x1bb0 <main+0x47c>
						case 2:
						LED2PORT |= 1<<LED2PIN;
    1af0:	da 9a       	sbi	0x1b, 2	; 27
						ledDelay = millis + 500;
    1af2:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1af6:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1afa:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1afe:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1b02:	4c 50       	subi	r20, 0x0C	; 12
    1b04:	5e 4f       	sbci	r21, 0xFE	; 254
    1b06:	6f 4f       	sbci	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <ledDelay>
    1b0e:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <ledDelay+0x1>
    1b12:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <ledDelay+0x2>
    1b16:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <ledDelay+0x3>
						while(ledDelay > millis){};
    1b1a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1b1e:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1b22:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1b26:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1b2a:	84 17       	cp	r24, r20
    1b2c:	95 07       	cpc	r25, r21
    1b2e:	a6 07       	cpc	r26, r22
    1b30:	b7 07       	cpc	r27, r23
    1b32:	98 f3       	brcs	.-26     	; 0x1b1a <main+0x3e6>
						LED2PORT &= ~(1<<LED2PIN);
    1b34:	da 98       	cbi	0x1b, 2	; 27
						break;
    1b36:	3c c0       	rjmp	.+120    	; 0x1bb0 <main+0x47c>
						case 3:
						LED3PORT |= 1<<LED3PIN;
    1b38:	db 9a       	sbi	0x1b, 3	; 27
						ledDelay = millis + 500;
    1b3a:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1b3e:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1b42:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1b46:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1b4a:	4c 50       	subi	r20, 0x0C	; 12
    1b4c:	5e 4f       	sbci	r21, 0xFE	; 254
    1b4e:	6f 4f       	sbci	r22, 0xFF	; 255
    1b50:	7f 4f       	sbci	r23, 0xFF	; 255
    1b52:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <ledDelay>
    1b56:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <ledDelay+0x1>
    1b5a:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <ledDelay+0x2>
    1b5e:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <ledDelay+0x3>
						while(ledDelay > millis){};
    1b62:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1b66:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1b6a:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1b6e:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1b72:	84 17       	cp	r24, r20
    1b74:	95 07       	cpc	r25, r21
    1b76:	a6 07       	cpc	r26, r22
    1b78:	b7 07       	cpc	r27, r23
    1b7a:	98 f3       	brcs	.-26     	; 0x1b62 <main+0x42e>
						LED3PORT &= ~(1<<LED3PIN);
    1b7c:	db 98       	cbi	0x1b, 3	; 27
						break;
    1b7e:	18 c0       	rjmp	.+48     	; 0x1bb0 <main+0x47c>
					}
			
			} 
		} else {
			if(ButtonPressedTime > 0){
    1b80:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <ButtonPressedTime>
    1b84:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <ButtonPressedTime+0x1>
    1b88:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <ButtonPressedTime+0x2>
    1b8c:	b0 91 e1 00 	lds	r27, 0x00E1	; 0x8000e1 <ButtonPressedTime+0x3>
    1b90:	18 16       	cp	r1, r24
    1b92:	19 06       	cpc	r1, r25
    1b94:	1a 06       	cpc	r1, r26
    1b96:	1b 06       	cpc	r1, r27
    1b98:	5c f4       	brge	.+22     	; 0x1bb0 <main+0x47c>
				ButtonPressedTime = 0;
    1b9a:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <ButtonPressedTime>
    1b9e:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <ButtonPressedTime+0x1>
    1ba2:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <ButtonPressedTime+0x2>
    1ba6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <ButtonPressedTime+0x3>
				LED1PORT &= ~(1<<LED1PIN);
    1baa:	d9 98       	cbi	0x1b, 1	; 27
				LED2PORT &= ~(1<<LED2PIN);
    1bac:	da 98       	cbi	0x1b, 2	; 27
				LED3PORT &= ~(1<<LED3PIN);
    1bae:	db 98       	cbi	0x1b, 3	; 27
			}
		}				
	}
		
		
		if(pulse == 1){
    1bb0:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <pulse>
    1bb4:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <pulse+0x1>
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <main+0x48a>
    1bbc:	47 c0       	rjmp	.+142    	; 0x1c4c <main+0x518>
		if(millis > nextTime){
    1bbe:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1bc2:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1bc6:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1bca:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1bce:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <nextTime>
    1bd2:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <nextTime+0x1>
    1bd6:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <nextTime+0x2>
    1bda:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <nextTime+0x3>
    1bde:	84 17       	cp	r24, r20
    1be0:	95 07       	cpc	r25, r21
    1be2:	a6 07       	cpc	r26, r22
    1be4:	b7 07       	cpc	r27, r23
    1be6:	c0 f5       	brcc	.+112    	; 0x1c58 <main+0x524>
			nextTime = millis + pulseDelay;
    1be8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1bec:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1bf0:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1bf4:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1bf8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <pulseDelay>
    1bfc:	82 0f       	add	r24, r18
    1bfe:	91 1d       	adc	r25, r1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	b1 1d       	adc	r27, r1
    1c04:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <nextTime>
    1c08:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <nextTime+0x1>
    1c0c:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <nextTime+0x2>
    1c10:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <nextTime+0x3>
			if(pulseDelayUp == 1){
    1c14:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pulseDelayUp>
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	51 f4       	brne	.+20     	; 0x1c30 <main+0x4fc>
				pulseDelayCounter ++;
    1c1c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <pulseDelayCounter>
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <pulseDelayCounter>
				if(pulseDelayCounter > 41){
    1c26:	8a 32       	cpi	r24, 0x2A	; 42
    1c28:	60 f0       	brcs	.+24     	; 0x1c42 <main+0x50e>
					pulseDelayUp = 0;
    1c2a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <pulseDelayUp>
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <main+0x50e>
				}
			} else {
				pulseDelayCounter --;
    1c30:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <pulseDelayCounter>
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <pulseDelayCounter>
				if(pulseDelayCounter < 1){
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <main+0x50e>
					pulseDelayUp = 1;
    1c3e:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <pulseDelayUp>
				}
			}
			pulseWidth = pulseDelayCounter;
    1c42:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <pulseDelayCounter>
    1c46:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <pulseWidth>
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <main+0x524>
		}
		} else {
			pulseWidth = 0;
    1c4c:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <pulseWidth>
			pulseDelayUp = 1;
    1c50:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <pulseDelayUp>
			pulseDelayCounter = 0;
    1c54:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <pulseDelayCounter>
		}
		
		#ifdef goon
		if(GoonMorse == 1){
    1c58:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <GoonMorse>
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <main+0x52e>
    1c60:	42 c0       	rjmp	.+132    	; 0x1ce6 <main+0x5b2>
			if(millis > nextTime){
    1c62:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1c66:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1c6a:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1c6e:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1c72:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <nextTime>
    1c76:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <nextTime+0x1>
    1c7a:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <nextTime+0x2>
    1c7e:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <nextTime+0x3>
    1c82:	84 17       	cp	r24, r20
    1c84:	95 07       	cpc	r25, r21
    1c86:	a6 07       	cpc	r26, r22
    1c88:	b7 07       	cpc	r27, r23
    1c8a:	68 f5       	brcc	.+90     	; 0x1ce6 <main+0x5b2>
				nextTime = millis + MorseDelay;
    1c8c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1c90:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1c94:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1c98:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1c9c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <MorseDelay>
    1ca0:	82 0f       	add	r24, r18
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	b1 1d       	adc	r27, r1
    1ca8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <nextTime>
    1cac:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <nextTime+0x1>
    1cb0:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <nextTime+0x2>
    1cb4:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <nextTime+0x3>
				MorseCounter ++;
    1cb8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
				if(MorseCounter > 51) MorseCounter = 0;
    1cbe:	84 33       	cpi	r24, 0x34	; 52
    1cc0:	18 f4       	brcc	.+6      	; 0x1cc8 <main+0x594>
		
		#ifdef goon
		if(GoonMorse == 1){
			if(millis > nextTime){
				nextTime = millis + MorseDelay;
				MorseCounter ++;
    1cc2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <main+0x598>
				if(MorseCounter > 51) MorseCounter = 0;
    1cc8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
				if(GoonBits[MorseCounter] == 1){
    1ccc:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <__data_end>
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	e5 59       	subi	r30, 0x95	; 149
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	19 f4       	brne	.+6      	; 0x1ce2 <main+0x5ae>
					pulseOn = 1;
    1cdc:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <pulseOn>
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <main+0x5b2>
				} else {
					pulseOn = 0;
    1ce2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <pulseOn>
				}
			}
		}
		#endif
		
		if(mode == 2){
    1ce6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <main+0x5bc>
    1cee:	99 cd       	rjmp	.-1230   	; 0x1822 <main+0xee>
			if(millis > BlingTimeCounter){
    1cf0:	40 91 d9 00 	lds	r20, 0x00D9	; 0x8000d9 <millis>
    1cf4:	50 91 da 00 	lds	r21, 0x00DA	; 0x8000da <millis+0x1>
    1cf8:	60 91 db 00 	lds	r22, 0x00DB	; 0x8000db <millis+0x2>
    1cfc:	70 91 dc 00 	lds	r23, 0x00DC	; 0x8000dc <millis+0x3>
    1d00:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <BlingTimeCounter>
    1d04:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <BlingTimeCounter+0x1>
    1d08:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <BlingTimeCounter+0x2>
    1d0c:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <BlingTimeCounter+0x3>
    1d10:	84 17       	cp	r24, r20
    1d12:	95 07       	cpc	r25, r21
    1d14:	a6 07       	cpc	r26, r22
    1d16:	b7 07       	cpc	r27, r23
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <main+0x5e8>
    1d1a:	83 cd       	rjmp	.-1274   	; 0x1822 <main+0xee>
				BlingTimeCounter = millis + BlingTimeDelay;
    1d1c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1d20:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1d24:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1d28:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1d2c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <BlingTimeDelay>
    1d30:	82 0f       	add	r24, r18
    1d32:	91 1d       	adc	r25, r1
    1d34:	a1 1d       	adc	r26, r1
    1d36:	b1 1d       	adc	r27, r1
    1d38:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <BlingTimeCounter>
    1d3c:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <BlingTimeCounter+0x1>
    1d40:	a0 93 a5 00 	sts	0x00A5, r26	; 0x8000a5 <BlingTimeCounter+0x2>
    1d44:	b0 93 a6 00 	sts	0x00A6, r27	; 0x8000a6 <BlingTimeCounter+0x3>
				BlingModeCounter += 1;
    1d48:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <BlingModeCounter>
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <BlingModeCounter>
				if(BlingModeCounter > 4) BlingModeCounter = 1;
    1d52:	85 30       	cpi	r24, 0x05	; 5
    1d54:	18 f0       	brcs	.+6      	; 0x1d5c <main+0x628>
    1d56:	10 93 a7 00 	sts	0x00A7, r17	; 0x8000a7 <BlingModeCounter>
    1d5a:	0c c0       	rjmp	.+24     	; 0x1d74 <main+0x640>
				switch (BlingModeCounter)
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	61 f0       	breq	.+24     	; 0x1d78 <main+0x644>
    1d60:	20 f4       	brcc	.+8      	; 0x1d6a <main+0x636>
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <main+0x634>
    1d66:	5d cd       	rjmp	.-1350   	; 0x1822 <main+0xee>
    1d68:	05 c0       	rjmp	.+10     	; 0x1d74 <main+0x640>
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	41 f0       	breq	.+16     	; 0x1d7e <main+0x64a>
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	49 f0       	breq	.+18     	; 0x1d84 <main+0x650>
    1d72:	57 cd       	rjmp	.-1362   	; 0x1822 <main+0xee>
				{
					case 1:
					LED1PORT |= 1<<LED1PIN;
    1d74:	d9 9a       	sbi	0x1b, 1	; 27
					break;
    1d76:	55 cd       	rjmp	.-1366   	; 0x1822 <main+0xee>
					case 2:
					LED2PORT |= 1<<LED2PIN;
    1d78:	da 9a       	sbi	0x1b, 2	; 27
					LED1PORT &= ~(1<<LED1PIN);
    1d7a:	d9 98       	cbi	0x1b, 1	; 27
					break;
    1d7c:	52 cd       	rjmp	.-1372   	; 0x1822 <main+0xee>
					case 3:
					LED3PORT |= 1<<LED3PIN;
    1d7e:	db 9a       	sbi	0x1b, 3	; 27
					LED2PORT &= ~(1<<LED2PIN);
    1d80:	da 98       	cbi	0x1b, 2	; 27
					break;
    1d82:	4f cd       	rjmp	.-1378   	; 0x1822 <main+0xee>
					case 4:
					LED3PORT &= ~(1<<LED3PIN);
    1d84:	db 98       	cbi	0x1b, 3	; 27
					break;
    1d86:	4d cd       	rjmp	.-1382   	; 0x1822 <main+0xee>

00001d88 <__vector_6>:
	 LED3PORT &= ~(1<<LED3PIN);
	 TVContinuous = 0;
	 OCR1A = 104; //Put timer back to normal
}

ISR(TIM1_COMPA_vect) {
    1d88:	1f 92       	push	r1
    1d8a:	0f 92       	push	r0
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	0f 92       	push	r0
    1d90:	11 24       	eor	r1, r1
    1d92:	2f 93       	push	r18
    1d94:	8f 93       	push	r24
    1d96:	9f 93       	push	r25
    1d98:	af 93       	push	r26
    1d9a:	bf 93       	push	r27
	//PORTA |= (1<<SLIDER3PIN);
	if(mode == 3){
    1d9c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mode>
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	b1 f4       	brne	.+44     	; 0x1dd0 <__vector_6+0x48>
	if(IRPulse == 1){
    1da4:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <IRPulse>
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <__vector_6+0x26>
		//IRLEDPORT ^= IRLEDPIN;
		PINA = (1<<IRLEDPIN);
    1dac:	89 bb       	out	0x19, r24	; 25
	}
	
	if(IRPulseCounter > 0)	{
    1dae:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <IRPulseCounter>
    1db2:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <IRPulseCounter+0x1>
    1db6:	89 2b       	or	r24, r25
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <__vector_6+0x34>
    1dba:	77 c0       	rjmp	.+238    	; 0x1eaa <__vector_6+0x122>
		IRPulseCounter --;
    1dbc:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <IRPulseCounter>
    1dc0:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <IRPulseCounter+0x1>
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <IRPulseCounter+0x1>
    1dca:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <IRPulseCounter>
    1dce:	6d c0       	rjmp	.+218    	; 0x1eaa <__vector_6+0x122>
	}
	} else {

		if(pulseCountUp == 1){
    1dd0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <pulseCountUp>
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	a9 f4       	brne	.+42     	; 0x1e02 <__vector_6+0x7a>
			pulseCounter ++;
    1dd8:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <pulseCounter>
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <pulseCounter>
			if(pulseCounter > 15){
    1de2:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <pulseCounter>
    1de6:	80 31       	cpi	r24, 0x10	; 16
    1de8:	10 f0       	brcs	.+4      	; 0x1dee <__vector_6+0x66>
				pulseCountUp = 0;
    1dea:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <pulseCountUp>
			}
			if(pulseOn == 1){
    1dee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <pulseOn>
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	21 f4       	brne	.+8      	; 0x1dfe <__vector_6+0x76>
				IRLEDPORT ^= 1<<IRLEDPIN;
    1df6:	9b b3       	in	r25, 0x1b	; 27
    1df8:	89 27       	eor	r24, r25
    1dfa:	8b bb       	out	0x1b, r24	; 27
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <__vector_6+0x9e>
			} else {
			IRLEDPORT &= ~(1<<IRLEDPIN);
    1dfe:	d8 98       	cbi	0x1b, 0	; 27
    1e00:	12 c0       	rjmp	.+36     	; 0x1e26 <__vector_6+0x9e>
			}
		} else {
			pulseCounter --;
    1e02:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <pulseCounter>
    1e06:	81 50       	subi	r24, 0x01	; 1
    1e08:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <pulseCounter>
			if(pulseCounter < 1){
    1e0c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <pulseCounter>
    1e10:	81 11       	cpse	r24, r1
    1e12:	08 c0       	rjmp	.+16     	; 0x1e24 <__vector_6+0x9c>
				pulseCountUp = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <pulseCountUp>
				pulseWidthCounter ++;
    1e1a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <pulseWidthCounter>
    1e1e:	8f 5f       	subi	r24, 0xFF	; 255
    1e20:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <pulseWidthCounter>
			}
			IRLEDPORT &= ~(1<<IRLEDPIN);
    1e24:	d8 98       	cbi	0x1b, 0	; 27
		}
		
		#ifdef goon
		if(GoonMorse == 0){
    1e26:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <GoonMorse>
    1e2a:	81 11       	cpse	r24, r1
    1e2c:	15 c0       	rjmp	.+42     	; 0x1e58 <__vector_6+0xd0>
		#endif
		if(pulseWidthCounter > pulseWidth){
    1e2e:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <pulseWidthCounter>
    1e32:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <pulseWidth>
    1e36:	89 17       	cp	r24, r25
    1e38:	78 f4       	brcc	.+30     	; 0x1e58 <__vector_6+0xd0>
			pulseOn = 0;
    1e3a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <pulseOn>
			if(pulseWidthCounter > 42){
    1e3e:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <pulseWidthCounter>
    1e42:	8b 32       	cpi	r24, 0x2B	; 43
    1e44:	48 f0       	brcs	.+18     	; 0x1e58 <__vector_6+0xd0>
				pulseWidthCounter = 0;
    1e46:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <pulseWidthCounter>
				if(pulseWidth > 0){
    1e4a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <pulseWidth>
    1e4e:	88 23       	and	r24, r24
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <__vector_6+0xd0>
					pulseOn = 1;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <pulseOn>
		}
		#ifdef goon
		}
		#endif
		
		buzzCounter ++;
    1e58:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <buzzCounter>
    1e5c:	8f 5f       	subi	r24, 0xFF	; 255
    1e5e:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <buzzCounter>
		if(buzzCounter > buzzWidth){
    1e62:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <buzzCounter>
    1e66:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <buzzWidth>
    1e6a:	89 17       	cp	r24, r25
    1e6c:	f0 f4       	brcc	.+60     	; 0x1eaa <__vector_6+0x122>
			buzzCounter = 0;
    1e6e:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <buzzCounter>
			sampleCounter ++;
    1e72:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <sampleCounter>
    1e76:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <sampleCounter+0x1>
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <sampleCounter+0x1>
    1e80:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <sampleCounter>
			if(sampleCounter > 511) sampleCounter = 0;
    1e84:	81 15       	cp	r24, r1
    1e86:	22 e0       	ldi	r18, 0x02	; 2
    1e88:	92 07       	cpc	r25, r18
    1e8a:	3c f0       	brlt	.+14     	; 0x1e9a <__vector_6+0x112>
    1e8c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <sampleCounter+0x1>
    1e90:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <sampleCounter>
			if(sampleCounter > 255){
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	07 c0       	rjmp	.+14     	; 0x1ea8 <__vector_6+0x120>
    1e9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <__vector_6+0x120>
    1ea0:	1c f0       	brlt	.+6      	; 0x1ea8 <__vector_6+0x120>
				OCR0A = 512-sampleCounter;
    1ea2:	81 95       	neg	r24
    1ea4:	86 bf       	out	0x36, r24	; 54
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <__vector_6+0x122>
			} else {
				OCR0A = sampleCounter;
    1ea8:	86 bf       	out	0x36, r24	; 54
			}
		}
		}
		
		//crude millis implementation. Accurate enough for our application
		millisCounter ++;
    1eaa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <millisCounter>
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <millisCounter>
		if(millisCounter == 75){
    1eb4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <millisCounter>
    1eb8:	8b 34       	cpi	r24, 0x4B	; 75
    1eba:	a9 f4       	brne	.+42     	; 0x1ee6 <__vector_6+0x15e>
			millis ++;
    1ebc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <millis>
    1ec0:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <millis+0x1>
    1ec4:	a0 91 db 00 	lds	r26, 0x00DB	; 0x8000db <millis+0x2>
    1ec8:	b0 91 dc 00 	lds	r27, 0x00DC	; 0x8000dc <millis+0x3>
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	a1 1d       	adc	r26, r1
    1ed0:	b1 1d       	adc	r27, r1
    1ed2:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <millis>
    1ed6:	90 93 da 00 	sts	0x00DA, r25	; 0x8000da <millis+0x1>
    1eda:	a0 93 db 00 	sts	0x00DB, r26	; 0x8000db <millis+0x2>
    1ede:	b0 93 dc 00 	sts	0x00DC, r27	; 0x8000dc <millis+0x3>
			millisCounter = 0;
    1ee2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <millisCounter>
		}

}
    1ee6:	bf 91       	pop	r27
    1ee8:	af 91       	pop	r26
    1eea:	9f 91       	pop	r25
    1eec:	8f 91       	pop	r24
    1eee:	2f 91       	pop	r18
    1ef0:	0f 90       	pop	r0
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	0f 90       	pop	r0
    1ef6:	1f 90       	pop	r1
    1ef8:	18 95       	reti

00001efa <__divmodsi4>:
    1efa:	05 2e       	mov	r0, r21
    1efc:	97 fb       	bst	r25, 7
    1efe:	16 f4       	brtc	.+4      	; 0x1f04 <__divmodsi4+0xa>
    1f00:	00 94       	com	r0
    1f02:	0f d0       	rcall	.+30     	; 0x1f22 <__negsi2>
    1f04:	57 fd       	sbrc	r21, 7
    1f06:	05 d0       	rcall	.+10     	; 0x1f12 <__divmodsi4_neg2>
    1f08:	14 d0       	rcall	.+40     	; 0x1f32 <__udivmodsi4>
    1f0a:	07 fc       	sbrc	r0, 7
    1f0c:	02 d0       	rcall	.+4      	; 0x1f12 <__divmodsi4_neg2>
    1f0e:	46 f4       	brtc	.+16     	; 0x1f20 <__divmodsi4_exit>
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <__negsi2>

00001f12 <__divmodsi4_neg2>:
    1f12:	50 95       	com	r21
    1f14:	40 95       	com	r20
    1f16:	30 95       	com	r19
    1f18:	21 95       	neg	r18
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f1e:	5f 4f       	sbci	r21, 0xFF	; 255

00001f20 <__divmodsi4_exit>:
    1f20:	08 95       	ret

00001f22 <__negsi2>:
    1f22:	90 95       	com	r25
    1f24:	80 95       	com	r24
    1f26:	70 95       	com	r23
    1f28:	61 95       	neg	r22
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f30:	08 95       	ret

00001f32 <__udivmodsi4>:
    1f32:	a1 e2       	ldi	r26, 0x21	; 33
    1f34:	1a 2e       	mov	r1, r26
    1f36:	aa 1b       	sub	r26, r26
    1f38:	bb 1b       	sub	r27, r27
    1f3a:	fd 01       	movw	r30, r26
    1f3c:	0d c0       	rjmp	.+26     	; 0x1f58 <__udivmodsi4_ep>

00001f3e <__udivmodsi4_loop>:
    1f3e:	aa 1f       	adc	r26, r26
    1f40:	bb 1f       	adc	r27, r27
    1f42:	ee 1f       	adc	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	a2 17       	cp	r26, r18
    1f48:	b3 07       	cpc	r27, r19
    1f4a:	e4 07       	cpc	r30, r20
    1f4c:	f5 07       	cpc	r31, r21
    1f4e:	20 f0       	brcs	.+8      	; 0x1f58 <__udivmodsi4_ep>
    1f50:	a2 1b       	sub	r26, r18
    1f52:	b3 0b       	sbc	r27, r19
    1f54:	e4 0b       	sbc	r30, r20
    1f56:	f5 0b       	sbc	r31, r21

00001f58 <__udivmodsi4_ep>:
    1f58:	66 1f       	adc	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	1a 94       	dec	r1
    1f62:	69 f7       	brne	.-38     	; 0x1f3e <__udivmodsi4_loop>
    1f64:	60 95       	com	r22
    1f66:	70 95       	com	r23
    1f68:	80 95       	com	r24
    1f6a:	90 95       	com	r25
    1f6c:	9b 01       	movw	r18, r22
    1f6e:	ac 01       	movw	r20, r24
    1f70:	bd 01       	movw	r22, r26
    1f72:	cf 01       	movw	r24, r30
    1f74:	08 95       	ret

00001f76 <eeprom_read_byte>:
    1f76:	e1 99       	sbic	0x1c, 1	; 28
    1f78:	fe cf       	rjmp	.-4      	; 0x1f76 <eeprom_read_byte>
    1f7a:	9f bb       	out	0x1f, r25	; 31
    1f7c:	8e bb       	out	0x1e, r24	; 30
    1f7e:	e0 9a       	sbi	0x1c, 0	; 28
    1f80:	99 27       	eor	r25, r25
    1f82:	8d b3       	in	r24, 0x1d	; 29
    1f84:	08 95       	ret

00001f86 <eeprom_update_byte>:
    1f86:	26 2f       	mov	r18, r22

00001f88 <eeprom_update_r18>:
    1f88:	e1 99       	sbic	0x1c, 1	; 28
    1f8a:	fe cf       	rjmp	.-4      	; 0x1f88 <eeprom_update_r18>
    1f8c:	9f bb       	out	0x1f, r25	; 31
    1f8e:	8e bb       	out	0x1e, r24	; 30
    1f90:	e0 9a       	sbi	0x1c, 0	; 28
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	0d b2       	in	r0, 0x1d	; 29
    1f96:	02 16       	cp	r0, r18
    1f98:	39 f0       	breq	.+14     	; 0x1fa8 <eeprom_update_r18+0x20>
    1f9a:	1c ba       	out	0x1c, r1	; 28
    1f9c:	2d bb       	out	0x1d, r18	; 29
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	e2 9a       	sbi	0x1c, 2	; 28
    1fa4:	e1 9a       	sbi	0x1c, 1	; 28
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	08 95       	ret

00001faa <_exit>:
    1faa:	f8 94       	cli

00001fac <__stop_program>:
    1fac:	ff cf       	rjmp	.-2      	; 0x1fac <__stop_program>
